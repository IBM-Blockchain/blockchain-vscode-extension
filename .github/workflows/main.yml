# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

# http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: CI
on:
  push:
    branches:
      - master
  pull_request:
    branches-ignore:
      - gh-pages
  schedule:
    - cron: "0 0 * * *"
  create:
    tags:
      - "*"
  workflow_dispatch: {}

jobs:
  unitTest:
    name: unit (${{ matrix.name }})
    runs-on: ${{ matrix.runs-on }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: linux
            runs-on: ubuntu-16.04
            VERSION: 1.40.0
          - name: mac
            runs-on: macos-10.14
            VERSION: 1.40.0
    steps:
      # remove when ready
      - name: remove when ready
        run: echo unit
        shell: bash
  #     # setup steps
  #     - name: Checkout
  #       uses: actions/checkout@v2
  #     - name: Install Node.js
  #       uses: actions/setup-node@v2
  #       with:
  #         node-version: 10
  #     - name: Install Lerna
  #       run: |
  #         set -ev
  #         npm install -g lerna
  #       shell: bash 
  #     - name: Start xvfb
  #       if:  ${{ success() && matrix.runs-on ==  'ubuntu-16.04'}}
  #       run : |
  #         set -ev
  #         /usr/bin/Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
  #         echo ">>> Started xvfb"
  #       shell: bash 
  #     - name: run lerna bootstrap
  #       run: |
  #         set -ev
  #         lerna bootstrap
  #       shell: bash 
  #     - name: compile packages
  #       run: |
  #         set -ev
  #         lerna run compile
  #       shell: bash 
  #       env:
  #         DISPLAY: ':99.0'
  #     - name: run npm audit
  #       run: |
  #         set -ev
  #         node ./.azure/audit.js
  #       shell: bash 
  #     # unit tests
  #     - name: Run unit tests
  #       if: success()
  #       run: |
  #         set -ev
  #         lerna run unit
  #       shell: bash
  #       env:
  #         DISPLAY: ':99.0'
  #     - name: Publish Unit Test Results
  #       uses: EnricoMi/publish-unit-test-result-action@v1
  #       if: always()
  #       with:
  #         files: packages/**/unit-tests.xml
  #     # extension unit-tests
  #     - name: Install Docker & pull microfab
  #       if: ${{ success() && matrix.runs-on == 'macos-10.14'}}
  #       run: |
  #         cd ./packages/blockchain-extension/scripts
  #         ./installdocker.sh
  #       shell: bash
  #     - name: Pull microfab image
  #       if: success()
  #       run: |
  #         set -ev
  #         docker pull ibmcom/ibp-microfab:0.0.10
  #     - name: Run extension unit tests
  #       if: success()
  #       run: |
  #         set -ev
  #         cd ./packages/blockchain-extension
  #         npm test
  #       shell: bash
  #       env:
  #         DISPLAY: ':99.0'
  #         REFRESH_PANELS: 'false'
  #     - name: Publish Extension Unit Test Results
  #       uses: EnricoMi/publish-unit-test-result-action@v1
  #       if: always()
  #       with:
  #         files: packages/blockchain-extension/unit-tests.xml
  # #  - task: PublishCodeCoverageResults@1
  # #    condition: succeededOrFailed()
  # #    inputs:
  # #      codeCoverageTool: Cobertura
  # #      summaryFileLocation: '$(System.DefaultWorkingDirectory)/packages/blockchain-extension/coverage/*coverage.xml'
  # #      reportDirectory: '$(System.DefaultWorkingDirectory)/coverage'

  cucumberTestSetVersion:
    steps:
      # remove when ready
      - name: remove when ready
        run: echo cucumberTestSetVersion
        shell: bash
      # - name: set version
      #   run: |
      #     if [[ "$(github.ref)" == "refs/tags/"* ]]; then
      #       echo "CUCUMBER_VERSION=stable" >> $GITHUB_ENV
      #     else
      #       echo "CUCUMBER_VERSION=1.40.0" >> $GITHUB_ENV
      #     fi
      #   shell: bash

  cucumberTest:
#      if: variables['Build.Reason'] == 'PullRequest' || (variables['Build.Reason'] == 'IndividualCI' && (startsWith(variables['Build.SourceBranch'], 'refs/tags/v1') || startsWith(variables['Build.SourceBranch'], 'refs/tags/v2')))
    name: cucumber (${{ matrix.name }})
    runs-on: ${{ matrix.imageName }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: cucumber
            imageName: ubuntu-16.04
            VERSION: "${{ env.CUCUMBER_VERSION }}"
            OTHER_FABRIC: 'false'
            OPSTOOLS_FABRIC: 'false'
            TWO_ORG_FABRIC: 'false'
            type: 'oneOrg'
          - name: cucumber_other
            imageName: ubuntu-16.04
            OTHER_FABRIC: 'true'
            OPSTOOLS_FABRIC: 'false'
            TWO_ORG_FABRIC: 'false'
            VERSION: "${{ env.CUCUMBER_VERSION }}"
            type: 'other'
          - name: cucumber_opsTools
            imageName: 'ubuntu-16.04'
            OTHER_FABRIC: 'false'
            OPSTOOLS_FABRIC: 'true'
            TWO_ORG_FABRIC: 'false'
            VERSION: "${{ env.CUCUMBER_VERSION }}"
            type: 'opsTools'
          - name: cucumber_two_org
            imageName: 'ubuntu-16.04'
            OTHER_FABRIC: 'false'
            OPSTOOLS_FABRIC: 'false'
            TWO_ORG_FABRIC: 'true'
            VERSION: "${{ env.CUCUMBER_VERSION }}"
            type: 'twoOrg'
    steps:
      # remove when ready
      - name: remove when ready
        run: echo cucumberTest
        shell: bash
      # # setup steps
      # - name: Checkout
      #   uses: actions/checkout@v2
      # - name: Install Node.js
      #   uses: actions/setup-node@v2
      #   with:
      #     node-version: 10
      # - name: Install Lerna
      #   run: |
      #     set -ev
      #     npm install -g lerna
      #   shell: bash 
      # - name: Start xvfb
      #   if:  ${{ success() && matrix.imageName ==  'ubuntu-16.04'}}
      #   run : |
      #     set -ev
      #     /usr/bin/Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
      #     echo ">>> Started xvfb"
      #   shell: bash 
      # - name: run lerna bootstrap
      #   run: |
      #     set -ev
      #     lerna bootstrap
      #   shell: bash 
      # - name: compile packages
      #   run: |
      #     set -ev
      #     lerna run compile
      #   shell: bash 
      #   env:
      #     DISPLAY: ':99.0'
      # - name: run npm audit
      #   run: |
      #     set -ev
      #     node ./.azure/audit.js
      #   shell: bash 
      # # cucumber job
      # - name: Setup Fabric
      #   if: ${{ success() && matrix.OTHER_FABRIC == true}} 
      #   run:  |
      #     set -ev
      #     cd ./packages/blockchain-extension
      #     ./cucumber/hlfv1/start.sh
      #     echo ${{ matrix.type }}
      # - name: Downloading secure files
      #   if: ${{ success() && matrix.OPSTOOLS_FABRIC == true}} 
      #   run: |
      #     echo ${secrets.Ordering_Org_Admin} | base64 -d > /tmp/Ordering_Org_Admin.json
      #     echo ${secrets.Ordering_Org_CA_Admin} | base64 -d > /tmp/Ordering_Org_CA_Admin.json
      #     echo ${secrets.Ordering_Org_Saas_Admin} | base64 -d > /tmp/Ordering_Org_Saas_Admin.json
      #     echo ${secrets.Ordering_Org_Saas_CA_Admin} | base64 -d > /tmp/Ordering_Org_Saas_CA_Admin.json
      #     echo ${secrets.Org1_Admin} | base64 -d > /tmp/Org1_Admin.json
      #     echo ${secrets.Org1_CA_Admin} | base64 -d > O/tmp/rg1_CA_Admin.json
      #     echo ${secrets.Org1_CA_Saas_Admin} | base64 -d > /tmp/Org1_CA_Saas_Admin.json
      #     echo ${secrets.Org1Saas_Admin} | base64 -d > /tmp/Org1Saas_Admin.json
      #     echo ${secrets.Org2_Admin} | base64 -d > /tmp/Org2_Admin.json
      #     echo ${secrets.Org2_CA_Admin} | base64 -d > /tmp/Org2_CA_Admin.json
      #     echo ${secrets.Org2_CA_Saas_Admin} | base64 -d > /tmp/Org2_CA_Saas_Admin.json
      #     echo ${secrets.Org2Saas_Admin} | base64 -d > /tmp/Org2Saas_Admin.json
      #   shell: bash
      # - name: Run cucumber tests
      #   if:
      #   run: |
      #     set -ev
      #     cd ./packages/blockchain-extension
      #     echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p
      #     npm run cucumber -- $(secrets.opsTools_url) $(secrets.opsTools_key) $(secrets.opsTools_secret) $(secrets.opsTools_SaaS_api_key)
      #   shell: bash
      #   env:
      #     DISPLAY: ':99.0'
      #     JSON_DIR: '/tmp'
      # - name: Upload artifacts
      #   if: success()
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: cucumber-${{ inputs.type }}-report
      #     path: packages/blockchain-extension/cucumber/report/**


  cucumberReport:
    needs: cucumberTest
    name: cucumberReport
    runs-on: 'ubuntu-16.04'
    steps:
      # remove when ready
      - name: remove when ready
        run: echo cucumberReport
        shell: bash
      # # setup steps
      # - name: Checkout
      #   uses: actions/checkout@v2
      # - name: Install Node.js
      #   uses: actions/setup-node@v2
      #   with:
      #     node-version: 10
      # - name: Install Lerna
      #   run: |
      #     set -ev
      #     npm install -g lerna
      #   shell: bash 
      # - name: Start xvfb
      #   if: success()
      #   run : |
      #     set -ev
      #     /usr/bin/Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
      #     echo ">>> Started xvfb"
      #   shell: bash 
      # - name: run lerna bootstrap
      #   run: |
      #     set -ev
      #     lerna bootstrap
      #   shell: bash 
      # - name: compile packages
      #   run: |
      #     set -ev
      #     lerna run compile
      #   shell: bash 
      #   env:
      #     DISPLAY: ':99.0'
      # - name: run npm audit
      #   run: |
      #     set -ev
      #     node ./.azure/audit.js
      #   shell: bash 
      # # cucumber report
      # - uses: actions/download-artifact@v2
      #   with:
      #     name: cucumber-oneOrg-report
      #     path: packages/blockchain-extension/cucumber/report
      # - uses: actions/download-artifact@v2
      #   with:
      #     name: cucumber-twoOrg-report
      #     path: packages/blockchain-extension/cucumber/report
      # - uses: actions/download-artifact@v2
      #   with:
      #     name: cucumber-opsTools-report
      #     path: packages/blockchain-extension/cucumber/report
      # - uses: actions/download-artifact@v2
      #   with:
      #     name: cucumber-other-report
      #     path: packages/blockchain-extension/cucumber/report
      # - name: Generate Cucumber report
      #   if: success()
      #   run: |
      #     set -ev
      #     cd ./packages/blockchain-extension
      #     npm run cucumberReport
      #   shell: bash
      #   env:
      #     DISPLAY: ':99.0'
      # - name: Upload artifacts
      #   if: success()
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: cucumber-html-report
      #     path: packages/blockchain-extension/cucumber/cucumber-report.html/**

  cypressTest:
    name: cypress (${{ matrix.name }})
    if: 
    #    condition: or(eq(variables['Build.Reason'], 'PullRequest'), and(eq(variables['Build.Reason'], 'IndividualCI'), or(startsWith(variables['Build.SourceBranch'], 'refs/tags/v1'), startsWith(variables['Build.SourceBranch'], 'refs/tags/v2'))))
    # startsWith(github.ref, 'refs/tags/v1') || startsWith(github.ref, 'refs/tags/v2')
    needs: []
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: linux
            runs-on: ubuntu-16.04
            VERSION: 1.40.0
          - name: mac
            runs-on: macos-10.14
            VERSION: 1.40.0
    steps:
      # remove when ready
      - name: remove when ready
        run: echo cypressTest
        shell: bash
      # # setup steps
      # - name: Checkout
      #   uses: actions/checkout@v2
      # - name: Install Node.js
      #   uses: actions/setup-node@v2
      #   with:
      #     node-version: 10
      # - name: Install Lerna
      #   run: |
      #     set -ev
      #     npm install -g lerna
      #   shell: bash 
      # - name: Start xvfb
      #   if:  ${{ success() && matrix.runs-on ==  'ubuntu-16.04'}}
      #   run : |
      #     set -ev
      #     /usr/bin/Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
      #     echo ">>> Started xvfb"
      #   shell: bash 
      # - name: run lerna bootstrap
      #   run: |
      #     set -ev
      #     lerna bootstrap
      #   shell: bash 
      # - name: compile packages
      #   run: |
      #     set -ev
      #     lerna run compile
      #   shell: bash 
      #   env:
      #     DISPLAY: ':99.0'
      # - name: run npm audit
      #   run: |
      #     set -ev
      #     node ./.azure/audit.js
      #   shell: bash 
      # # Cypress tests
      # - name: Run cypress tests
      #   if: success()
      #   run: |
      #     cd ./packages/blockchain-ui
      #     npm run cypressCli
      #   shell: bash
      #   env:
      #     DISPLAY: ':99.0'
  
  buildPackage:
    needs: [unitTest, cucumberTest, cypressTest]
    name: buildPackage
    runs-on: 'ubuntu-16.04'
    steps:
      # remove when ready
      - name: remove when ready
        run: echo buildPackage
        shell: bash
      # # setup steps
      # - name: Checkout
      #   uses: actions/checkout@v2
      # - name: Install Node.js
      #   uses: actions/setup-node@v2
      #   with:
      #     node-version: 10
      # - name: Install Lerna
      #   run: |
      #     set -ev
      #     npm install -g lerna
      #   shell: bash 
      # - name: Start xvfb
      #   if: success()
      #   run : |
      #     set -ev
      #     /usr/bin/Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
      #     echo ">>> Started xvfb"
      #   shell: bash 
      # - name: run lerna bootstrap
      #   run: |
      #     set -ev
      #     lerna bootstrap
      #   shell: bash 
      # - name: compile packages
      #   run: |
      #     set -ev
      #     lerna run compile
      #   shell: bash 
      #   env:
      #     DISPLAY: ':99.0'
      # - name: run npm audit
      #   run: |
      #     set -ev
      #     node ./.azure/audit.js
      #   shell: bash 
      # # build package
      # - name: Set production flag
      #   if: startsWith(github.ref, 'refs/tags/')
      #   run: |
      #     set -ev
      #     cd ./packages/blockchain-extension
      #     npm run productionFlag
      #   shell: bash
      # - name: npm pack the modules
      #   run: |
      #     set -ev
      #     lerna run createModule
      # - name: package extension
      #   run: |
      #     set -ev
      #     cp ./README.md ./packages/blockchain-extension/README.md
      #     cp ./CHANGELOG.md ./packages/blockchain-extension/CHANGELOG.md
      #     cp -r ./media ./packages/blockchain-extension/media
      #     cd ./packages/blockchain-extension
      #     npm install ../blockchain-ui/ibm-blockchain-platform-ui-*.tgz
      #     npm install ../blockchain-common/ibm-blockchain-platform-common-*.tgz
      #     npm install ../blockchain-fabric-admin/ibm-blockchain-platform-fabric-admin-*.tgz
      #     npm install ../blockchain-wallet/ibm-blockchain-platform-wallet-*.tgz
      #     npm install ../blockchain-environment-v1/ibm-blockchain-platform-environment-v1-*.tgz
      #     npm install ../blockchain-gateway-v1/ibm-blockchain-platform-gateway-v1-*.tgz
      #     npm run package
      #   shell: bash
      # - name: Upload artifacts
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: vscode-che-package
      #     path: packages/blockchain-extension/ibm-blockchain-platform-**.vsix

  buildChePackage:
    needs: [unitTest, cucumberTest, cypressTest]
    name: buildPackage
    steps:
      # remove when ready
      - name: remove when ready
        run: echo buil che dPackage
        shell: bash
      # # build che package
      # - name: Build Che package
      #   run: che/build.sh
      #   shell: bash
      # - name: Upload artifacts
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: vscode-che-package
      #     path: |
      #       che/ibm-blockchain-platform-**.vsix
      #       che/ibm-blockchain-platform-**.yaml

  buildPdf:
    if: condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
    steps:
      # remove when ready
      - name: remove when ready
        run: echo buildPdf
        shell: bash
      # # build pdf
      # - name: Set GitHub user name and email
      #   if: success()
      #   run: |
      #     set -ex
      #     git config --global user.name $(GH_USER_NAME)
      #     git config --global user.email $(GH_USER_EMAIL)
      #   shell: bash
      # - name: Commit updated PDFs & Push to GitHub if tutorials changed
      #   run: |
      #     # set -ex
      #     # mdFiles="$(git diff --name-only --diff-filter=ADMR @~..@ | awk /\\/new-tutorials\\// | awk /.md$/)"
      #     # if [ "$mdFiles" != "" ]; then
      #     #   cd ./packages/blockchain-extension/scripts
      #     #   ./mdToPdf.sh
      #     #   git status
      #     #   git reset -- ../package.json && git reset -- ../package-lock.json
      #     #   git add ../resources/tutorials/*
      #     #   git commit -asm "PDFs automatically generated"
      #     #   git status

      #     #   if [[ $(Build.SourceBranchName) == master ]]; then
      #     #     export branch_name=master
      #     #   elif [[ $(Build.SourceBranchName) == v2 ]]; then
      #     #     export branch_name=v2
      #     #   elif [[ $(Build.SourceBranchName) == merge-2648 ]]; then
      #     #     export branch_name=merge-2648
      #     #   else 
      #     #     exit 1
      #     #   fi

      #     #   git -c http.extraheader="Authorization: Basic $(GH_BASIC_AUTH)" push $(Build.Repository.Uri) HEAD:$branch_name -f
      #     # fi
      #   shell: bash

  deploy:
    name: deploy
    if: #    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags'))
    needs: [unitTest, cucumberTest, cypressTest, buildPackage, buildChePackage]
    steps:
      # remove when ready
      - name: remove when ready
        run: echo deploy
        shell: bash
  #     - uses: actions/download-artifact@v2
  #       with:
  #         name: vscode-package
  #         path: ./
  #     - uses: actions/download-artifact@v2
  #       with:
  #         name: vscode-che-package
  #         path: ./
  #     - name: Get github tag
  #       run: |
  #         set -ev
  #         export tag=$(git tag --sort=-creatordate | head -n 1)
  #         echo "##vso[task.setvariable variable=github_tag]$tag"
  #       shell: bash
  # #       - task: GitHubRelease@1
  # #        inputs:
  # #          gitHubConnection: 'github.com_cazfletch'
  # #          repositoryName: '$(Build.Repository.Name)'
  # #          action: 'edit'
  # #          tag: '$(github_tag)'
  # #          target: '$(Build.SourceVersion)'
  # #          assetUploadMode: 'replace'
  # #          isPreRelease: true
  # #          addChangeLog: false
  # #          assets: |
  # #            $(Build.SourcesDirectory)/ibm-blockchain-platform-*.vsix
  # #            $(Build.SourcesDirectory)/ibm-blockchain-platform-*.yaml
  #     - name: Publish extension
  #       if: ${{ success() && startsWith(github.ref, 'refs/tags/v2') }}
  #       run: |
  #         set -ev
  #         npm install vsce
  #         git checkout package.json
  # #          node ./node_modules/vsce/out/vsce publish -p $(VSCETOKEN) --packagePath ibm-blockchain-platform-2*
  #       shell: bash
  #     - name: Check release notes
  #       if: success()
  #       run: |
  #         set -ex
  #         npm install dateformat
  #         git checkout package.json
  #         cd ./packages/blockchain-extension
  #         npm run checkReleaseNotes
  #       shell: bash
  #     - name: Set GitHub user name and email
  #       if: success()
  #       run: |
  #         set -ex
  #         git config --global user.name $(secrets.GH_USER_NAME)
  #         git config --global user.email $(secrets.GH_USER_EMAIL)
  #       shell: bash
  #     - name: Use lerna to bump version
  #       if: success()
  #       run: |
  #         set -ex
  #         npm install lerna
  #         git checkout package.json
  #         if [[ $(Build.SourceBranchName) == v2* ]]; then
  #             node ./node_modules/lerna/cli.js version patch --yes --no-git-tag-version
  #         else
  #             node ./node_modules/lerna/cli.js version prerelease --yes --no-git-tag-version
  #         fi
  #       shell: bash
  #     - name: Build website
  #       if: success()
  #       run: |
  #         set -ex
  #         cd ./packages/blockchain-website
  #         npm install
  #         npm run build
  #         rm -rf ../../docs/*
  #         mv build/* ../../docs
  #       shell: bash
  #     - name: Commit version bump
  #       if: success()
  #       run: |
  #         set -ex
  #         VERSION=$(jq -r ".version" ./packages/blockchain-extension/package.json)
  #         git status
  #         git add docs/*
  #         git commit -asm "Automatic version bump to ${VERSION}"
  #       shell: bash
  #     - name: Push commit to GitHub
  #       if: success()
  #       run: |
  #         set -ex
  #         if [[ $(Build.SourceBranchName) == v2* ]]; then
  #           export branch_name=master
  #         else
  #           export branch_name=v2
  #         fi
  #         git -c http.extraheader="Authorization: Basic $(GH_BASIC_AUTH)" push $(Build.Repository.Uri) HEAD:$branch_name -f
  #       shell: bash


  otherVersionsUnitTest:
    name: otherVersionsUnit (${{ matrix.name }})
    if: #     condition: eq(variables['Build.Reason'], 'Schedule')
    runs-on: ${{ matrix.runs-on }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: linux
            runs-on: ubuntu-16.04
            VERSION: 'insiders'
          - name: mac
            runs-on: macos-10.14
            VERSION: 'insiders'
    steps:
      # remove when ready
      - name: remove when ready
        run: echo other versions unit test
        shell: bash
  #     # setup steps
  #     - name: Checkout
  #       uses: actions/checkout@v2
  #     - name: Install Node.js
  #       uses: actions/setup-node@v2
  #       with:
  #         node-version: 10
  #     - name: Install Lerna
  #       run: |
  #         set -ev
  #         npm install -g lerna
  #       shell: bash 
  #     - name: Start xvfb
  #       if:  ${{ success() && matrix.runs-on ==  'ubuntu-16.04'}}
  #       run : |
  #         set -ev
  #         /usr/bin/Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
  #         echo ">>> Started xvfb"
  #       shell: bash 
  #     - name: run lerna bootstrap
  #       run: |
  #         set -ev
  #         lerna bootstrap
  #       shell: bash 
  #     - name: compile packages
  #       run: |
  #         set -ev
  #         lerna run compile
  #       shell: bash 
  #       env:
  #         DISPLAY: ':99.0'
  #     - name: run npm audit
  #       run: |
  #         set -ev
  #         node ./.azure/audit.js
  #       shell: bash 
  #     # unit tests
  #     - name: Run unit tests
  #       if: success()
  #       run: |
  #         set -ev
  #         lerna run unit
  #       shell: bash
  #       env:
  #         DISPLAY: ':99.0'
  #     - name: Publish Unit Test Results
  #       uses: EnricoMi/publish-unit-test-result-action@v1
  #       if: always()
  #       with:
  #         files: packages/**/unit-tests.xml
  #     # extension unit tests
  #     - name: Install Docker & pull microfab
  #       if: ${{ success() && matrix.runs-on == 'macos-10.14'}}
  #       run: |
  #         cd ./packages/blockchain-extension/scripts
  #         ./installdocker.sh
  #       shell: bash
  #     - name: Pull microfab image
  #       if: success()
  #       run: |
  #         set -ev
  #         docker pull ibmcom/ibp-microfab:0.0.10
  #     - name: Run extension unit tests
  #       if: success()
  #       run: |
  #         set -ev
  #         cd ./packages/blockchain-extension
  #         npm test
  #       shell: bash
  #       env:
  #         DISPLAY: ':99.0'
  #         REFRESH_PANELS: 'false'
  #     - name: Publish Extension Unit Test Results
  #       uses: EnricoMi/publish-unit-test-result-action@v1
  #       if: always()
  #       with:
  #         files: packages/blockchain-extension/unit-tests.xml
  # #  - task: PublishCodeCoverageResults@1
  # #    condition: succeededOrFailed()
  # #    inputs:
  # #      codeCoverageTool: Cobertura
  # #      summaryFileLocation: '$(System.DefaultWorkingDirectory)/packages/blockchain-extension/coverage/*coverage.xml'
  # #      reportDirectory: '$(System.DefaultWorkingDirectory)/coverage'



otherVersionsCucumberTest:
  name: cucumber (${{ matrix.name }})
    if: #    condition: eq(variables['Build.Reason'], 'Schedule')
    runs-on: ${{ matrix.imageName }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: insiders cucumber
            imageName: ubuntu-16.04
            VERSION: insiders
            OTHER_FABRIC: 'false'
            OPSTOOLS_FABRIC: 'false'
            TWO_ORG_FABRIC: 'false'
            type: 'oneOrg'
          - name: insiders cucumber_other
            imageName: ubuntu-16.04
            OTHER_FABRIC: 'true'
            OPSTOOLS_FABRIC: 'false'
            TWO_ORG_FABRIC: 'false'
            VERSION: insiders
            type: 'other'
          - name: cinsiders ucumber_opsTools
            imageName: 'ubuntu-16.04'
            OTHER_FABRIC: 'false'
            OPSTOOLS_FABRIC: 'true'
            TWO_ORG_FABRIC: 'false'
            VERSION: insiders
            type: 'opsTools'
          - name: insiders cucumber_two_org
            imageName: 'ubuntu-16.04'
            OTHER_FABRIC: 'false'
            OPSTOOLS_FABRIC: 'false'
            TWO_ORG_FABRIC: 'true'
            VERSION: insiders
            type: 'twoOrg'
          - name: old cucumber
            imageName: ubuntu-16.04
            VERSION: '1.40.0'
            OTHER_FABRIC: 'false'
            OPSTOOLS_FABRIC: 'false'
            TWO_ORG_FABRIC: 'false'
            type: 'oneOrg'
          - name: old cucumber_other
            imageName: ubuntu-16.04
            OTHER_FABRIC: 'true'
            OPSTOOLS_FABRIC: 'false'
            TWO_ORG_FABRIC: 'false'
            VERSION: '1.40.0'
            type: 'other'
          - name: old cucumber_opsTools
            imageName: 'ubuntu-16.04'
            OTHER_FABRIC: 'false'
            OPSTOOLS_FABRIC: 'true'
            TWO_ORG_FABRIC: 'false'
            VERSION: '1.40.0'
            type: 'opsTools'
          - name: old cucumber_two_org
            imageName: 'ubuntu-16.04'
            OTHER_FABRIC: 'false'
            OPSTOOLS_FABRIC: 'false'
            TWO_ORG_FABRIC: 'true'
            VERSION: '1.40.0'
            type: 'twoOrg'
          - name: latest cucumber
            imageName: ubuntu-16.04
            VERSION: 'stable'
            OTHER_FABRIC: 'false'
            OPSTOOLS_FABRIC: 'false'
            TWO_ORG_FABRIC: 'false'
            type: 'oneOrg'
          - name: latest cucumber_other
            imageName: ubuntu-16.04
            OTHER_FABRIC: 'true'
            OPSTOOLS_FABRIC: 'false'
            TWO_ORG_FABRIC: 'false'
            VERSION: 'stable'
            type: 'other'
          - name: latest cucumber_opsTools
            imageName: 'ubuntu-16.04'
            OTHER_FABRIC: 'false'
            OPSTOOLS_FABRIC: 'true'
            TWO_ORG_FABRIC: 'false'
            VERSION: 'stable'
            type: 'opsTools'
          - name: latest cucumber_two_org
            imageName: 'ubuntu-16.04'
            OTHER_FABRIC: 'false'
            OPSTOOLS_FABRIC: 'false'
            TWO_ORG_FABRIC: 'true'
            VERSION: 'stable'
            type: 'twoOrg'
    steps:
      # remove when ready
      - name: remove when ready
        run: echo other versions cucumber tests
        shell: bash
      # # setup steps
      # - name: Checkout
      #   uses: actions/checkout@v2
      # - name: Install Node.js
      #   uses: actions/setup-node@v2
      #   with:
      #     node-version: 10
      # - name: Install Lerna
      #   run: |
      #     set -ev
      #     npm install -g lerna
      #   shell: bash 
      # - name: Start xvfb
      #   if:  ${{ success() && matrix.imageName ==  'ubuntu-16.04'}}
      #   run : |
      #     set -ev
      #     /usr/bin/Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
      #     echo ">>> Started xvfb"
      #   shell: bash 
      # - name: run lerna bootstrap
      #   run: |
      #     set -ev
      #     lerna bootstrap
      #   shell: bash 
      # - name: compile packages
      #   run: |
      #     set -ev
      #     lerna run compile
      #   shell: bash 
      #   env:
      #     DISPLAY: ':99.0'
      # - name: run npm audit
      #   run: |
      #     set -ev
      #     node ./.azure/audit.js
      #   shell: bash 
      # # cucumber job
      # - name: Setup Fabric
      #   if: ${{ success() && matrix.OTHERFABRIC == true}} 
      #   run:  |
      #     set -ev
      #     cd ./packages/blockchain-extension
      #     ./cucumber/hlfv1/start.sh
      #     echo ${{ matrix.type }}
      # - name: Downloading secure files
      #   if: ${{ success() && matrix.OPSTOOLS_FABRIC == true}} 
      #   run: |
      #     echo ${secrets.Ordering_Org_Admin} | base64 -d > /tmp/Ordering_Org_Admin.json
      #     echo ${secrets.Ordering_Org_CA_Admin} | base64 -d > /tmp/Ordering_Org_CA_Admin.json
      #     echo ${secrets.Ordering_Org_Saas_Admin} | base64 -d > /tmp/Ordering_Org_Saas_Admin.json
      #     echo ${secrets.Ordering_Org_Saas_CA_Admin} | base64 -d > /tmp/Ordering_Org_Saas_CA_Admin.json
      #     echo ${secrets.Org1_Admin} | base64 -d > /tmp/Org1_Admin.json
      #     echo ${secrets.Org1_CA_Admin} | base64 -d > O/tmp/rg1_CA_Admin.json
      #     echo ${secrets.Org1_CA_Saas_Admin} | base64 -d > /tmp/Org1_CA_Saas_Admin.json
      #     echo ${secrets.Org1Saas_Admin} | base64 -d > /tmp/Org1Saas_Admin.json
      #     echo ${secrets.Org2_Admin} | base64 -d > /tmp/Org2_Admin.json
      #     echo ${secrets.Org2_CA_Admin} | base64 -d > /tmp/Org2_CA_Admin.json
      #     echo ${secrets.Org2_CA_Saas_Admin} | base64 -d > /tmp/Org2_CA_Saas_Admin.json
      #     echo ${secrets.Org2Saas_Admin} | base64 -d > /tmp/Org2Saas_Admin.json
      #   shell: bash
      # - name: Run cucumber tests
      #   if:
      #   run: |
      #     set -ev
      #     cd ./packages/blockchain-extension
      #     echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p
      #     npm run cucumber -- $(secrets.opsTools_url) $(secrets.opsTools_key) $(secrets.opsTools_secret) $(secrets.opsTools_SaaS_api_key)
      #   shell: bash
      #   env:
      #     DISPLAY: ':99.0'
      #     JSON_DIR: '/tmp'
      # - name: Upload artifacts
      #   if: success()
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: cucumber-${{ inputs.type }}-report
      #     path: packages/blockchain-extension/cucumber/report/**