/**
 * SPDX-License-Identifier: Apache-2.0
 */

package org.example;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatCode;

<%_ if (connectionProfileHome || walletHome) {-%>
import java.nio.file.Path;
import java.nio.file.Paths;
<%_ }-%>
<%_ let argsArray = false; _%>
<%_ transactions.forEach((transaction) => { _%>
    <%_ if (transaction.parameters && transaction.parameters.length > 0) { _%>
        <%_ transaction.parameters.forEach((parameter) => { _%>
            <%_ if (parameter.hasOwnProperty('schema') && parameter.schema.hasOwnProperty('type') && parameter.schema.type === 'array') { _%>
                <%_ argsArray = true; _%>
            <%_ } _%>
        <%_ }) _%>
    <%_ } _%>
<%_ }) _%>
<%_ if (argsArray) { _%>
import java.util.Arrays;
<%_ } _%>
import java.util.concurrent.TimeoutException;

import org.hyperledger.fabric.gateway.Contract;
import org.hyperledger.fabric.gateway.ContractException;
import org.hyperledger.fabric.gateway.Gateway;
import org.hyperledger.fabric.gateway.Network;
import org.hyperledger.fabric.gateway.Wallet;
import org.hyperledger.fabric.gateway.Wallets;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;

/**
 * Use this file for functional testing of your smart contract.
 * Fill out the arguments and return values for a function and
 * use the CodeLens links above the transaction blocks to
 * invoke/submit transactions.
 * All transactions defined in your smart contract are used here
 * to generate tests, including those functions that would
 * normally only be used on instantiate and upgrade operations.
 * This basic test file can also be used as the basis for building
 * further functional tests to run as part of a continuous
 * integration pipeline, or for debugging locally deployed smart
 * contracts by invoking/submitting individual transactions.
 *
 * Generating this test file will also modify the build file
 * in the smart contract project directory. This will require
 * the Java classpath/configuration to be synchronized.
 */

<%_ const capsChaincodeLabelForJava = chaincodeLabel[0].toUpperCase() + chaincodeLabel.slice(1).replace(/\./g, "").replace("@", ""); _%>
<%_ let capsContractName = ''; _%>
<%_ if (contractName !== '') { _%>
<%_ capsContractName = contractName[0].toUpperCase() + contractName.slice(1); _%>
public final class Fv<%=capsContractName%><%=capsChaincodeLabelForJava%>Test {
<%_ } else { _%>
public final class Fv<%=capsChaincodeLabelForJava%>Test {
<%_ } _%>

    Wallet fabricWallet;
    Gateway gateway;
    Gateway.Builder builder;
    Network network;
    Contract contract;
    <%_ if (walletHome) {-%>
        <%_ const walletPathForJava = walletPath.replace(/path\.join/, 'Paths.get').replace(/'/g,'"'); _%>
    String homedir = System.getProperty("user.home");
    Path walletPath = <%-walletPathForJava%>;
    <%_ } else { _%>
    Path walletPath = Paths.get("<%-walletPath%>");
    <%_ } _%>
    <%_ if (conProfileHome) {-%>
        <%_ if (!walletHome) {-%>
    String homedir = System.getProperty("user.home");
        <%_ } _%>
        <%_ const connectionProfilePathForJava = connectionProfileHome.replace(/path\.join/, 'Paths.get').replace(/'/g,'"'); _%>
    Path connectionProfilePath = <%-connectionProfilePathForJava%>;
    <%_ } else { _%>
    Path connectionProfilePath = Paths.get("<%-connectionProfileHome%>");
    <%_ } _%>
    String identityName = "<%-identityName%>";
    boolean isLocalhostURL = JavaSmartContractUtil.hasLocalhostURLs(connectionProfilePath);

    @BeforeEach
    public void before() {
        assertThatCode(() -> {
            JavaSmartContractUtil.setDiscoverAsLocalHost(isLocalhostURL);
            fabricWallet = Wallets.newFileSystemWallet(walletPath);
            builder = Gateway.createBuilder();
            builder.identity(fabricWallet, identityName).networkConfig(connectionProfilePath).discovery(true);
            gateway = builder.connect();
            network = gateway.getNetwork("<%=channelName%>");
        <%_ if (capsContractName !== '') { _%>
            contract = network.getContract("<%-chaincodeName%>", "<%-capsContractName%>");
        <%_ } else { _%>
            contract = network.getContract("<%-chaincodeName%>");
        <%_ } _%>
        }).doesNotThrowAnyException();
    }

    @AfterEach
    public void after() {
        gateway.close();
    }
    <%_ const formatToType = { int8: 'byte',int16: 'short', int32: 'int', int64: 'long', double: 'double', float: 'float' }; _%>
    <%_ const primitiveDefault = { boolean: 'true', byte: '0', short: '0', int: '0', long: '0', double: '0', float: '0', char: "''E''" }; _%>
    <%_ let getType = function (rootObj) { _%>
        <%_ let itemType = ''; _%>
        <%_ if(rootObj.hasOwnProperty('type')) { _%>
            <%_ if(rootObj.type === 'integer') { _%>
                <%_ if(rootObj.hasOwnProperty('format')) { _%>
                    <%_ itemType = formatToType[rootObj.format]; _%>
                <%_ } else {_%>
                    <%_ itemType = 'long'; _%>
                <%_ } _%>
            <%_ } else if(rootObj.type === 'number') { _%>
                <%_ if(rootObj.hasOwnProperty('format')) { _%>
                    <%_ itemType = formatToType[rootObj.format]; _%>
                <%_ } else {_%>
                    <%_ itemType = 'double'; _%>
                <%_ } _%>
            <%_ } else if (rootObj.type === 'string') {_%>
                <%_ itemType = 'String';_%>
            <%_ } else if (rootObj.type === 'boolean') {_%>
                <%_ itemType = 'boolean'; _%>
            <%_ } _%>
        <%_ } else if(rootObj.hasOwnProperty('$ref')) { _%>
            <%_ itemType = rootObj.$ref.split("/").pop(); _%>
        <%_ } else { _%>
            <%_ itemType = 'Object'; _%>
        <%_ } _%>
        <%_ return itemType; _%>
    <%_ } _%>
    <%_ transactions.forEach((transaction) => { _%>
    <%_ const capsTransactionName = transaction.name[0].toUpperCase() + transaction.name.slice(1); _%>

    @Nested
    class <%=capsTransactionName%> {
        @Test
        public void submit<%=capsTransactionName%>Test() throws ContractException, TimeoutException, InterruptedException {
            <%_ if (transaction.parameters && transaction.parameters.length > 0) { _%>
            // TODO: populate transaction parameters
                <%_ let params = []; _%>
                <%_ transaction.parameters.forEach((parameter) => { _%>
                    <%_ if (parameter.hasOwnProperty('schema') && (parameter.schema.type || parameter.schema.$ref)) { _%>
                        <%_ let type = ''; _%>
                        <%_ if (parameter.schema.type === 'array' && parameter.schema.hasOwnProperty('items')) { _%>
                            <%_ type = getType(parameter.schema.items); _%>
                            <%_ params.push(` Arrays.toString(${parameter.name.replace(`"`,'')})`); _%>
            <%=type%>[] <%=parameter.name.replace(`"`,'')%> = {};
                        <%_ } else { _%>
                            <%_ type = getType(parameter.schema); _%>
                            <%_ const isJavaPrim = typeof primitiveDefault[type] !== 'undefined'; _%>
                            <%_ const value = isJavaPrim ? primitiveDefault[type] : type === 'String' ? '"EXAMPLE"' : `new ${type}()`; _%>
                            <%_ if (type === 'String') { _%>
                                <%_ params.push(` ${parameter.name.replace(`"`,'')}`); _%>
                            <%_ } else if (isJavaPrim || type === 'Object') { _%>
                                <%_ params.push(` String.valueOf(${parameter.name.replace(`"`,'')})`); _%>
                            <%_ } else { _%>
                                <%_ params.push(` ${parameter.name.replace(`"`,'')}.toString()`); _%>
                            <%_ } _%>
            <%=type%> <%=parameter.name.replace(`"`,'')%> = <%-value.replace(/^\'/,'').replace(/\'$/, '')%>;
                        <%_ } _%>
                    <%_ } _%>
                <%_ }) _%>
            String[] args = new String[]{<%=params%> };
            <%_ } else { _%>
            // TODO: Update with parameters of transaction
            String[] args = new String[0];
            <%_ } _%>

            byte[] response = contract.submitTransaction("<%=transaction.name%>", args);
            // submitTransaction returns buffer of transaction return value
            // TODO: Update with return value of transaction
            assertThat(true).isEqualTo(true);
            // assertThat(new String(response)).isEqualTo("");
        }
    }
    <%_ }) _%>
}