/*
* Use this file for functional testing of your smart contract.
* Fill out the arguments and return values for a function and
* use the CodeLens links above the transaction blocks to
* invoke/submit transactions.
* All transactions defined in your smart contract are used here
* to generate tests, including those functions that would
* normally only be used on instantiate and upgrade operations.
* This basic test file can also be used as the basis for building
* further functional tests to run as part of a continuous
* integration pipeline, or for debugging locally deployed smart
* contracts by invoking/submitting individual transactions.
*/
/*
* Generating this test file will also trigger an npm install
* in the smart contract project directory. This installs any
* package dependencies, including fabric-network, which are
* required for this test file to be run locally.
*/

'use strict';

const assert = require('assert');
const fabricNetwork = require('fabric-network');
const SmartContractUtil = require('./js-smart-contract-util');
<%_ if (walletHome) {-%>
const os = require('os');
const path = require('path');
<%_ }-%>

<%_ if (contractName !== '') { _%>
describe('<%=contractName%>-<%=chaincodeLabel%>' , () => {
<%_ } else { _%>
describe('<%=chaincodeLabel%>' , () => {
<%_ } _%>

    <%_ if (walletHome) {-%>
    const homedir = os.homedir();
    const walletPath = <%-walletPath%>;
    <%_ } else { _%>
    const walletPath = '<%-walletPath%>';
    <%_ } _%>
    const gateway = new fabricNetwork.Gateway();
    let wallet;
    const identityName = '<%-identityName%>';
    let connectionProfile;

    before(async () => {
        connectionProfile = await SmartContractUtil.getConnectionProfile();
        wallet = await fabricNetwork.Wallets.newFileSystemWallet(walletPath);
    });

    beforeEach(async () => {

        const discoveryAsLocalhost = SmartContractUtil.hasLocalhostURLs(connectionProfile);
        const discoveryEnabled = true;

        const options = {
            wallet: wallet,
            identity: identityName,
            discovery: {
                asLocalhost: discoveryAsLocalhost,
                enabled: discoveryEnabled
            }
        };

        await gateway.connect(connectionProfile, options);
    });

    afterEach(async () => {
        gateway.disconnect();
    });
<% transactions.forEach((transaction) => { %>
    describe('<%=transaction.name%>', () =>{
        it('should submit <%=transaction.name%> transaction', async () => {
            <%_ if (transaction.parameters && transaction.parameters.length > 0) { _%>
            // TODO: populate transaction parameters
                <%_ let params = []; _%>
                <%_ transaction.parameters.forEach((parameter) => { _%>
                    <%_ if (parameter.schema && parameter.schema.type) { _%>
                        <%_ if (parameter.schema.type === 'string') { _%>
                            <%_  params.push(` ${parameter.name.replace(`"`,'')}`) _%>
            const <%=parameter.name.replace(`"`,'')%> = 'EXAMPLE';
                        <%_ } else if (parameter.schema.type === 'number') { _%>
                            <%_  params.push(` ${parameter.name.replace(`"`,'')}.toString()`) _%>
            const <%=parameter.name.replace(`"`,'')%> = 0;
                        <%_ } else if (parameter.schema.type === 'boolean') { _%>
                            <%_  params.push(` ${parameter.name.replace(`"`,'')}.toString()`) _%>
            const <%=parameter.name.replace(`"`,'')%> = true;
                        <%_ } else if (parameter.schema.type === 'array') { _%>
                            <%_  params.push(` JSON.stringify(${parameter.name.replace(`"`,'')})`) _%>
            const <%=parameter.name.replace(`"`,'')%> = [];
                        <%_ } _%>
                    <%_ } else { _%>
                        <%_  params.push(` JSON.stringify(${parameter.name.replace(`"`,'')})`) _%>
            const <%=parameter.name.replace(`"`,'')%> = {};
                    <%_ } _%>
                <%_ }) _%>
            const args = [<%=params%>];
            <%_ } else { _%>
            // TODO: Update with parameters of transaction
            const args = [];
            <%_ } _%>

            const response = await SmartContractUtil.submitTransaction('<%=contractName%>', '<%=transaction.name%>', args, gateway); // Returns buffer of transaction return value
            // TODO: Update with return value of transaction
            // assert.equal(JSON.parse(response.toString()), undefined);
        }).timeout(10000);
    });
<% }) %>
});
