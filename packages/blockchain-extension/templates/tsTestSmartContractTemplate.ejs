/*
* Use this file for functional testing of your smart contract.
* Fill out the arguments and return values for a function and
* use the CodeLens links above the transaction blocks to
* invoke/submit transactions.
* All transactions defined in your smart contract are used here
* to generate tests, including those functions that would
* normally only be used on instantiate and upgrade operations.
* This basic test file can also be used as the basis for building
* further functional tests to run as part of a continuous
* integration pipeline, or for debugging locally deployed smart
* contracts by invoking/submitting individual transactions.
*/
/*
* Generating this test file will also trigger an npm install
* in the smart contract project directory. This installs any
* package dependencies, including fabric-network, which are
* required for this test file to be run locally.
*/

import * as assert from 'assert';
import * as fabricNetwork from 'fabric-network';
import { SmartContractUtil } from './ts-smart-contract-util';

<%_ if (walletHome) {-%>
import * as os from 'os';
import * as path from 'path';
<%_ }-%>

<%_ if (contractName !== '') { _%>
describe('<%=contractName%>-<%=chaincodeLabel%>' , () => {
<%_ } else { _%>
describe('<%=chaincodeLabel%>' , () => {
<%_ } _%>

    <%_ if (walletHome) {-%>
    const homedir: string = os.homedir();
    const walletPath: string = <%-walletPath%>;
    <%_ } else { _%>
    const walletPath: string = '<%-walletPath%>';
    <%_ } _%>
    const gateway: fabricNetwork.Gateway = new fabricNetwork.Gateway();
    let fabricWallet: fabricNetwork.Wallet;
    const identityName: string = '<%-identityName%>';
    let connectionProfile: any;

    before(async () => {
        connectionProfile = await SmartContractUtil.getConnectionProfile();
        fabricWallet = await fabricNetwork.Wallets.newFileSystemWallet(walletPath);
    });

    beforeEach(async () => {
        const discoveryAsLocalhost: boolean = SmartContractUtil.hasLocalhostURLs(connectionProfile);
        const discoveryEnabled: boolean = true;

        const options: fabricNetwork.GatewayOptions = {
            discovery: {
                asLocalhost: discoveryAsLocalhost,
                enabled: discoveryEnabled,
            },
            identity: identityName,
            wallet: fabricWallet,
        };

        await gateway.connect(connectionProfile, options);
    });

    afterEach(async () => {
        gateway.disconnect();
    });
<% transactions.forEach((transaction) => { %>
    describe('<%=transaction.name%>', () => {
        it('should submit <%=transaction.name%> transaction', async () => {
            <%_ if (transaction.parameters && transaction.parameters.length > 0) { _%>
            // TODO: populate transaction parameters
                <%_ let params = []; _%>
                <%_ transaction.parameters.forEach((parameter) => { _%>
                    <%_ if (parameter.schema && parameter.schema.type) { _%>
                        <%_ if (parameter.schema.type === 'string') { _%>
                            <%_  params.push(` ${parameter.name.replace(`"`,'')}`) _%>
            const <%=parameter.name.replace(`"`,'')%>: <%=parameter.schema.type.replace(`"`,'')%> = 'EXAMPLE';
                        <%_ } else if (parameter.schema.type === 'number') { _%>
                            <%_  params.push(` ${parameter.name.replace(`"`,'')}.toString()`) _%>
            const <%=parameter.name.replace(`"`,'')%>: <%=parameter.schema.type.replace(`"`,'')%> = 0;
                        <%_ } else if (parameter.schema.type === 'boolean') { _%>
                            <%_  params.push(` ${parameter.name.replace(`"`,'')}.toString()`) _%>
            const <%=parameter.name.replace(`"`,'')%>: <%=parameter.schema.type.replace(`"`,'')%> = true;
                        <%_ } else if (parameter.schema.type === 'array') { _%>
                            <%_  params.push(` JSON.stringify(${parameter.name.replace(`"`,'')})`) _%>
            const <%=parameter.name.replace(`"`,'')%>: any[] = [];
                        <%_ } _%>
                    <%_ } else { _%>
                        <%_  params.push(` JSON.stringify(${parameter.name.replace(`"`,'')})`) _%>
            const <%=parameter.name.replace(`"`,'')%>: any = {};
                    <%_ } _%>
                <%_ }) _%>
            const args: string[] = [<%=params%>];
            <%_ } else { _%>
            // TODO: Update with parameters of transaction
            const args: string[] = [];
            <%_ } _%>

            const response: Buffer = await SmartContractUtil.submitTransaction('<%=contractName%>', '<%=transaction.name%>', args, gateway);
            // submitTransaction returns buffer of transcation return value
            // TODO: Update with return value of transaction
            assert.equal(true, true);
            // assert.equal(JSON.parse(response.toString()), undefined);
        }).timeout(10000);
    });
<% }) %>
});
