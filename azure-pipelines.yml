schedules:
  - cron: "0 0 * * *"
    displayName: Daily insiders build
    branches:
      include:
        - master
    always: true

trigger:
  tags:
    include:
      - '*'

stages:
  - stage: unitTest
    condition: ne(variables['Build.Reason'], 'Schedule')
    dependsOn: []
    jobs:
      - job: unit
        strategy:
          matrix:
            linux:
              imageName: 'ubuntu-16.04'
              VERSION: '1.35.1'
              MODULES: 64
              ELECTRON: '3.0'
              TARGET: '3.0.0'
            mac:
              imageName: 'macos-10.14'
              VERSION: '1.35.1'
              MODULES: 64
              ELECTRON: '3.0'
              TARGET: '3.0.0'
        pool:
          vmImage: $(imageName)

        steps:
          - template: azure-templates/setup-steps.yml
          - template: azure-templates/rebuild-steps.yml
          - template: azure-templates/unit-test-steps.yml

  - stage: cucumberTest
    condition: ne(variables['Build.Reason'], 'Schedule')
    dependsOn: []

    jobs:
      - job: cucumber
        strategy:
          matrix:
            cucumber:
              imageName: 'ubuntu-16.04'
            cucumber_other:
              imageName: 'ubuntu-16.04'
              OTHER_FABRIC: 'true'

        pool:
          vmImage: $(imageName)

        steps:
          - template: azure-templates/setup-steps.yml
          - template: azure-templates/cucumber-steps.yml

  - stage: jestTest
    condition: ne(variables['Build.Reason'], 'Schedule')
    dependsOn: []
    jobs:
      - job: jest
        strategy:
          matrix:
            linux:
              imageName: 'ubuntu-16.04'
              VERSION: '1.35.1'
              MODULES: 64
              ELECTRON: '3.0'
              TARGET: '3.0.0'
            mac:
              imageName: 'macos-10.14'
              VERSION: '1.35.1'
              MODULES: 64
              ELECTRON: '3.0'
              TARGET: '3.0.0'
        pool:
          vmImage: $(imageName)

        steps:
          - template: azure-templates/setup-steps.yml
          - template: azure-templates/rebuild-steps.yml
          - template: azure-templates/jest-test-steps.yml

  - stage: cypressTest
    condition: ne(variables['Build.Reason'], 'Schedule')
    dependsOn: []
    jobs:
      - job: cypress
        strategy:
          matrix:
            linux:
              imageName: 'ubuntu-16.04'
              VERSION: '1.35.1'
              MODULES: 64
              ELECTRON: '3.0'
              TARGET: '3.0.0'
            mac:
              imageName: 'macos-10.14'
              VERSION: '1.35.1'
              MODULES: 64
              ELECTRON: '3.0'
              TARGET: '3.0.0'
        pool:
          vmImage: $(imageName)

        steps:
          - template: azure-templates/setup-steps.yml
          - template: azure-templates/rebuild-steps.yml
          - template: azure-templates/cypress-steps.yml



  - stage: buildPackage
    dependsOn:
      - unitTest
      - cucumberTest
      - jestTest
      - cypressTest
    jobs:
      - job: buildPackage

        pool:
          vmImage: 'ubuntu-16.04'

        steps:
          - template: azure-templates/setup-steps.yml

          - bash: |
              set -ev
              cd ./packages/blockchain-extension
              npm run productionFlag
            displayName: Set production flag
            condition: startsWith(variables['Build.SourceBranch'], 'refs/tags')

          - bash: |
              set -ev
              cd ./packages/blockchain-ui
              npm pack
            displayName: npm pack the ui

          - bash: |
              set -ev
              cp ./README.md ./packages/blockchain-extension/README.md
              cp -r ./media ./packages/blockchain-extension/media
              cd ./packages/blockchain-extension
              npm install ../blockchain-ui/ibm-blockchain-platform-ui-*.tgz
              npm run package
            displayName: package extension

          - task: CopyFiles@2
            inputs:
              sourceFolder: '$(Build.SourcesDirectory)/packages/blockchain-extension'
              contents: '*.vsix'
              targetFolder: '$(Build.ArtifactStagingDirectory)'

          - task: PublishBuildArtifacts@1
            inputs:
              pathtoPublish: '$(Build.ArtifactStagingDirectory)'
              artifactName: vscode-package

  - stage: deploy
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags'))
    dependsOn:
      - unitTest
      - cucumberTest
      - jestTest
      - cypressTest
      - buildPackage
    jobs:
      - job:
        pool:
          vmImage: 'ubuntu-16.04'
        steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: vscode-package
              path: $(Build.SourcesDirectory)

          - bash: |
              set -ev
              npm install vsce
              node ./packages/blockchain-extension/node_modules/vsce/out/vsce publish -p $(VSCETOKEN) --packagePath ibm-blockchain-platform-*
            displayName: Publish extension
            condition: succeeded()
            

          - script: |
              set -ex
              npm install dateformat
              git checkout package.json package-lock.json
              cd ./packages/blockchain-extension
              npm run checkReleaseNotes
            displayName: Check release notes
            condition: succeeded() 

          - script: |
              set -ex
              git config --global user.name $(GITHUB_USER_NAME)
              git config --global user.email $(GITHUB_USER_EMAIL)
            displayName: Set GitHub user name and email
            condition: succeeded()

          - script: |
              set -ex
              npm install -g lerna
              lerna version patch --no-git-tag-version
            displayName: Use lerna to bump version
            condition: succeeded()

          - script: |
              set -ex
              VERSION=$(jq -r ".version" ./packages/blockchain-extension/package.json)
              git commit -asm "Automatic version bump to ${VERSION}"
            displayName: Commit version bump
            condition: succeeded()

          - script: |
              set -ex
              git -c http.extraheader="Authorization: Basic $(GITHUB_BASIC_AUTH)" push $(Build.Repository.Uri) HEAD:master -f
            displayName: Push commit to GitHub
            condition: succeeded()

  - stage: otherVersionsUnitTest
    condition: eq(variables['Build.Reason'], 'Schedule')
    dependsOn: []
    jobs:
      - job: unit
        strategy:
          matrix:
            insiders_linux:
              imageName: 'ubuntu-16.04'
              VERSION: 'insiders'
              MODULES: 73
              ELECTRON: '6.1'
              TARGET: '6.1.2'
            insiders_mac:
              imageName: 'macos-10.14'
              VERSION: 'insiders'
              MODULES: 73
              ELECTRON: '6.1'
              TARGET: '6.1.2'
        pool:
          vmImage: $(imageName)

        steps:
          - template: azure-templates/setup-steps.yml
          - template: azure-templates/rebuild-steps.yml
          - template: azure-templates/unit-test-steps.yml

  - stage: otherVersionsCucumberTest
    condition: eq(variables['Build.Reason'], 'Schedule')
    dependsOn: []
    jobs:
      - job: cucumber
        strategy:
          matrix:
            insiders_cucumber:
              imageName: 'ubuntu-16.04'
              VERSION: 'insiders'
            insiders_cucumber_other:
              imageName: 'ubuntu-16.04'
              OTHER_FABRIC: 'true'
              VERSION: 'insiders'
            old_cucumber:
              imageName: 'ubuntu-16.04'
              VERSION: '1.38.1'
            old_cucumber_other:
              imageName: 'ubuntu-16.04'
              OTHER_FABRIC: 'true'
              VERSION: '1.38.1'
        pool:
          vmImage: $(imageName)

        steps:
          - template: azure-templates/setup-steps.yml
          - template: azure-templates/cucumber-steps.yml
  - stage: docker
    dependsOn:
      - unitTest
      - cucumberTest
      - jestTest
      - cypressTest
    jobs:
      - job: docker
        pool:
          vmImage: ubuntu-16.04
        steps:
          - script: docker/build.sh
            displayName: Build Docker image
          - script: |
              set -ex
              VERSION=$(jq -r ".version" ./packages/blockchain-extension/package.json)
              docker tag ibmblockchain/vscode:latest ibmblockchain/vscode:${VERSION}
              echo docker push ibmblockchain/vscode:${VERSION}
              echo docker push ibmblockchain/vscode:latest
            condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags'))
            displayName: Push Docker image to Docker Hub (release build)
          - script: |
              set -ex
              docker tag ibmblockchain/vscode:latest ibmblockchain/vscode:unstable
              echo docker push ibmblockchain/vscode:unstable
            condition: eq(variables['Build.Reason'], 'Schedule')
            displayName: Push Docker image to Docker Hub (nightly build)
