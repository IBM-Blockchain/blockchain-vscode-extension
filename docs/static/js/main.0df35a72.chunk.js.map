{"version":3,"sources":["checkmark.svg","error.svg","warning.svg","components/IssuesList/IssuesList.tsx","components/StatusList/StatusList.tsx","components/UpcomingList/UpcomingList.tsx","components/CurrentVersion/CurrentVersion.tsx","components/HighLevelStatus/HighLevelStatus.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["module","exports","githubProject","IssuesList","issue","labels","name","startsWith","issueLabels","className","issueItems","this","props","error","undefined","issues","issuesArray","sortedArray","newestMilestone","map","filter","label","push","sort","a","b","localeCompare","creationDate","Date","created_at","updateDate","updated_at","updateOrCloseDate","toLocaleDateString","state","title","number","getLabel","href","html_url","length","milestoneUrl","milestoneNumber","reportIncident","milestoneRelease","Component","StatusList","refreshIssues","bind","Axios","get","response","setState","data","key","issueLabel","UpcomingList","milestoneResponse","currentMilestone","reduce","due_on","issuesThisMilestone","latestDueDate","dt","setDate","getDate","milestoneTitle","milestone","newMilestone","CurrentVersion","currentVersion","HighLevelStatus","description","icon","sev1Count","sev2Count","sev3Count","forEach","warning","checkmark","alt","src","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.0df35a72.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/checkmark.24529495.svg\";","module.exports = __webpack_public_path__ + \"static/media/error.c5fb699b.svg\";","module.exports = __webpack_public_path__ + \"static/media/warning.0f510748.svg\";","import React, { Component } from 'react';\nimport './IssuesList.scss';\n\nconst githubProject: string = 'IBM-Blockchain/blockchain-vscode-extension';\n\n// Github URLs\nconst issuesHtmlUrl: string = 'https://github.com/' + githubProject + '/issues?q=';\nconst newIssueUrl: string = 'https://github.com/' + githubProject + '/issues/new';\n\ninterface IssueProps {\n    issues?: any;\n    error?: string;\n    title?: string;\n    issueLabel?: string;\n    newestMilestone?: any;\n    milestoneNumber?: string;\n}\n\nclass IssuesList extends Component<IssueProps, {}> {\n\n    getLabel(issue: any): JSX.Element {\n        if (issue.labels[0].name.startsWith('sev')) {\n            let labelJSX: JSX.Element = <></>;\n\n            const issueLabels: [{id: number, node_id: string, url: string, name: string, color: string, default: boolean, description: string}] = issue.labels;\n            if (issueLabels[0].name === 'sev1') {\n                labelJSX = (\n                    <h3 className='label bg-sev1'> {'sev1'}\n                    </h3>\n                );\n            } else if (issueLabels[0].name === 'sev2') {\n                labelJSX = (\n                    <h3 className='label bg-sev2'> {'sev2'}\n                    </h3>\n                );\n            } else {\n                labelJSX = (\n                    <h3 className='label bg-sev3'> {'sev3'}\n                    </h3>\n                );\n            }\n            return labelJSX;\n\n        } else {\n            return <></>;\n        }\n    }\n\n    render(): JSX.Element {\n        let issueItems: any = (\n            <div className='no-issues'>Please wait, loading status information</div>\n        );\n        if (this.props.error) {\n            issueItems = (\n                <div className='no-issues'> {this.props.error}</div>\n            );\n        } else if (this.props.issues !== undefined) {\n            // Sort the incidents by severity\n            let issuesArray: any = this.props.issues;\n            const sortedArray: any = [];\n            if (!this.props.newestMilestone) {\n                issuesArray.map((issue: any) => {\n                    let labels: any = issue.labels;\n                    labels = labels.filter((label: {id: number, node_id: string, url: string, name: string, color: string, default: boolean, description: string}) => {\n                        return(label.name.startsWith('sev') || label.name.startsWith('status'));\n                    });\n                    issue.labels = labels;\n                    sortedArray.push(issue);\n                });\n                issuesArray = sortedArray.sort((a: any, b: any) => a.labels[0].name.localeCompare(b.labels[0].name));\n            }\n\n            issueItems = issuesArray.map((issue: any) => {\n                const creationDate: Date = new Date(issue.created_at);\n                const updateDate: Date = new Date(issue.updated_at);\n                let updateOrCloseDate: string = 'Updated: ' + updateDate.toLocaleDateString();\n                if (issue.state === 'closed') {\n                    updateOrCloseDate = 'Resolved: ' + updateDate.toLocaleDateString();\n                }\n\n                return (\n                    <div className='panel'>\n                        <div>\n                            <p className='issue-title'>\n                                {(issue.state === 'closed' ? 'RESOLVED: ' : '') + issue.title + ' (#' + issue.number + ')'}\n                            </p>\n                        </div>\n                        <div className='label-div'>\n                            {this.getLabel(issue)}\n                        </div>\n                        <div>\n                            <span className='date'>{'Reported: ' + creationDate.toLocaleDateString()}</span>\n                            <br></br>\n                            <span className='date'>{updateOrCloseDate}</span>\n                        </div>\n                        <a className='link view-issue' href={issue.html_url}>{'View on GitHub'}</a>\n                    </div>\n                );\n            });\n\n            if (issueItems.length === 0) {\n                if (this.props.newestMilestone) { // Only issues in current milestone have this property.\n                    issueItems = (\n                        <div className='no-issues'>\n                            No completed fixes yet!\n                        </div>\n                    );\n                } else {\n                    issueItems = (\n                        <div className='no-issues'>\n                            No incidents found!\n                        </div>\n                    );\n                }\n            }\n        }\n\n        let milestoneUrl: string = 'https://github.com/' + githubProject + '/milestone/';\n        milestoneUrl += this.props.milestoneNumber;\n        const milestoneRelease: boolean = (this.props.newestMilestone !== undefined) ? true : false;\n        let reportIncident: JSX.Element;\n\n        if (this.props.newestMilestone) {\n            reportIncident = (<></>);\n        } else {\n            reportIncident = <span className='new-issue-position'>\n                <a className='button' href={newIssueUrl}>Report a new issue</a>\n                </span>;\n        }\n\n        return(\n            <div>\n                <div className='div-title'>\n                    {this.props.title}\n\n                    <div className='button-container'>\n                        {milestoneRelease ? (\n                            <span className='view-milestone'>\n                                <a className='link' href={milestoneUrl}> {'See current milestone'} </a>\n                            </span>\n                        ) : (\n                            <span className='view-all-position'>\n                                <a className='link' href={issuesHtmlUrl}> {'View all on GitHub'} </a>\n                            </span>\n                        )}\n                        {reportIncident}\n                    </div>\n                </div>\n                <div className='flex-container'>\n                    {issueItems}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default IssuesList;\n","import React, { Component } from 'react';\nimport IssuesList from '../IssuesList/IssuesList';\nimport Axios, { AxiosResponse } from 'axios';\n\nconst githubProject: string = 'IBM-Blockchain/blockchain-vscode-extension';\n\n// Github URLs\nconst issuesStatusApiUrl: string = 'https://api.github.com/repos/' + githubProject + '/issues?labels=status';\n\ninterface StatusState {\n    issues: any;\n    error: string | undefined;\n}\n\nclass StatusList extends Component<{}, StatusState> {\n\n    constructor(props: Readonly<StatusState>) {\n        super(props);\n        this.state = {\n            issues: undefined,\n            error: undefined\n        };\n\n        this.refreshIssues = this.refreshIssues.bind(this);\n    }\n\n    async componentDidMount(): Promise<void> {\n        await this.refreshIssues();\n    }\n\n    async refreshIssues(): Promise<void> {\n\n        try {\n            const response: AxiosResponse = await Axios.get(issuesStatusApiUrl);\n            this.setState({\n                issues : response.data\n            });\n        } catch (error) {\n            this.setState({\n                error : 'Cannot load incidents from Github, sorry.'\n            });\n        }\n    }\n\n    render(): JSX.Element {\n        if (this.state.issues || this.state.error) {\n            return (\n                <div>\n                    <IssuesList\n                        key='issues'\n                        issues={this.state.issues}\n                        error={this.state.error}\n                        title='Known current issues'\n                        issueLabel='status'>\n                    </IssuesList>\n                </div>\n            );\n        } else {\n            return <></>;\n        }\n    }\n}\n\nexport default StatusList;\n","import React, { Component } from 'react';\nimport Axios, { AxiosResponse } from 'axios';\nimport IssuesList from '../IssuesList/IssuesList';\n\nconst githubProject: string = 'IBM-Blockchain/blockchain-vscode-extension';\n\n// Github URLs\nconst issuesNextApiUrl: string = 'https://api.github.com/repos/' + githubProject + '/issues?labels=next&state=closed&per_page=100';\nconst allMilestones: string = 'https://api.github.com/repos/' + githubProject + '/milestones';\n\ninterface UpcomingState {\n    issues: any;\n    error: string | undefined;\n    newestMilestone: any;\n}\n\nclass UpcomingList extends Component<{}, UpcomingState> {\n\n    constructor(props: Readonly<UpcomingState>) {\n        super(props);\n        this.state = {\n            issues: undefined,\n            error: undefined,\n            newestMilestone: undefined\n        };\n\n        this.refreshIssues = this.refreshIssues.bind(this);\n    }\n\n    async componentDidMount(): Promise <void> {\n        try {\n            const milestoneResponse: AxiosResponse = await Axios.get(allMilestones);\n            const currentMilestone: number = milestoneResponse.data.reduce((a: any, b: any) => {\n                return (a.due_on > b.due_on) ? a : b;\n            });\n            this.setState({\n                newestMilestone: currentMilestone\n            });\n        } catch (error) {\n            this.setState({\n                error : 'Cannot load from Github, sorry.'\n            });\n        }\n\n        await this.refreshIssues();\n    }\n\n    async refreshIssues(): Promise<void> {\n        try {\n            const response: AxiosResponse = await Axios.get(issuesNextApiUrl);\n            this.setState({\n                issues: response.data\n            });\n        } catch (error) {\n            this.setState({\n                error : 'Cannot load from Github, sorry.'\n            });\n        }\n    }\n\n    render(): JSX.Element {\n        let latestDueDate: string = '';\n        let milestoneNumber: string = '';\n        let issuesThisMilestone: any;\n        if (this.state.newestMilestone) {\n            const dt: Date = new Date(this.state.newestMilestone.due_on);\n\n            // Set expected release date to milestone due_date minus days (thursday before)\n            dt.setDate(dt.getDate() - 4);\n\n            latestDueDate = dt.toLocaleDateString();\n            milestoneNumber = this.state.newestMilestone.number;\n        }\n\n        if (this.state.issues || this.state.error) {\n            if (this.state.issues && this.state.newestMilestone) {\n                const milestoneTitle: string = this.state.newestMilestone.title;\n\n                issuesThisMilestone = this.state.issues.filter((issue: any) => {\n                    if (issue.milestone) {\n                        if (issue.milestone.title === milestoneTitle) {\n                            return issue;\n                        }\n                    }\n                });\n            }\n            let title: string = '';\n            let newMilestone: any;\n\n            if (this.state.error) {\n                title = 'Fixed in upcoming release';\n                newMilestone = 'someMilestone';\n            } else {\n                title = 'Fixed in upcoming release (expected on ' + latestDueDate + ')';\n                newMilestone = this.state.newestMilestone;\n            }\n\n            return (\n                <div>\n                    <IssuesList\n                        key='issues'\n                        issues={issuesThisMilestone}\n                        error={this.state.error}\n                        title={title}\n                        issueLabel='next'\n                        newestMilestone= {newMilestone}\n                        milestoneNumber={milestoneNumber}>\n                    </IssuesList>\n                </div>\n            );\n        } else {\n            return <></>;\n        }\n    }\n}\n\nexport default UpcomingList;\n","import React, { Component } from 'react';\nimport Axios, { AxiosResponse } from 'axios';\nimport './CurrentVersion.scss';\n\nconst githubProject: string = 'IBM-Blockchain/blockchain-vscode-extension';\n\n// Github URLs\nconst currentReleaseApiUrl: string = 'https://api.github.com/repos/' + githubProject + '/releases/latest';\nconst allReleases: string = 'https://github.com/' + githubProject + '/releases/';\n\ninterface VersionState {\n    currentVersion: string;\n}\n\nclass CurrentVersion extends Component<{}, VersionState> {\n\n    constructor(props: Readonly<VersionState>) {\n        super(props);\n        this.state = {\n            currentVersion: ''\n        };\n    }\n\n    async componentDidMount(): Promise<void> {\n        try {\n            const response: AxiosResponse = await Axios.get(currentReleaseApiUrl);\n            this.setState({\n                currentVersion : response.data.name\n            });\n        } catch (error) {\n            return;\n        }\n    }\n\n    render(): JSX.Element {\n        if (this.state.currentVersion.length !== 0) {\n            return(\n                <p className='latest-version'>\n                    {'Latest release: '}\n                    <a className='current-version-link' href={allReleases}>\n                        {this.state.currentVersion}\n                    </a>\n                </p>\n            );\n        } else {\n            return <div/>;\n        }\n    }\n}\n\nexport default CurrentVersion;\n","import React, { Component } from 'react';\nimport Axios, { AxiosResponse } from 'axios';\nimport './HighLevelStatus.scss';\nimport checkmark from '../../checkmark.svg';\nimport error from '../../error.svg';\nimport warning from '../../warning.svg';\n\nconst githubProject: string = 'IBM-Blockchain/blockchain-vscode-extension';\n\n// Github URLs\nconst issuesStatusApiUrl: string = 'https://api.github.com/repos/' + githubProject + '/issues?labels=status';\n\ninterface HighLevelStatusState {\n    description: string;\n    icon: string;\n}\n\nclass HighLevelStatus extends Component<{}, HighLevelStatusState> {\n\n    constructor(props: Readonly<HighLevelStatusState>) {\n        super(props);\n        this.state = {\n            description: '',\n            icon: ''\n        };\n    }\n\n    async componentDidMount(): Promise<void> {\n        let description: string;\n        let icon: string;\n        let sev1Count: number = 0;\n        let sev2Count: number = 0;\n        let sev3Count: number = 0;\n\n        try {\n            const response: AxiosResponse = await Axios.get(issuesStatusApiUrl);\n            const allIssues: any = response.data;\n            allIssues.forEach((issue: any) => {\n                if (issue.labels) {\n                    issue.labels.forEach((label: {id: number, node_id: string, url: string, name: string, color: string, default: boolean, description: string}) => {\n                        if (label.name === 'sev1') {\n                            sev1Count += 1;\n                        } else if (label.name === 'sev2') {\n                            sev2Count += 1;\n                        } else if (label.name === 'sev3') {\n                            sev3Count += 1;\n                        }\n                    });\n                }\n            });\n            if (sev1Count > 0) {\n                icon = error;\n                description = 'There is at least one sev1 issue';\n            } else if (sev2Count > 0 || sev3Count > 0) {\n                icon = warning;\n                description = 'There is at least one sev2 or sev3 issue';\n            } else {\n                icon = checkmark;\n                description = 'There are no known issues';\n            }\n\n            this.setState({\n                description: description,\n                icon: icon\n            });\n        } catch (error) {\n            return;\n        }\n    }\n\n    render(): JSX.Element {\n        if (this.state.icon !== '') {\n            return(\n                <p className='current-status'>\n                    <span>\n                        Current overall status: <span> </span> {/* Added a space after colon using span */}\n                    </span>\n                    <img className='icon' alt='' title={this.state.description} src={this.state.icon}/>\n                </p>\n            );\n        } else {\n            return <div/>;\n        }\n    }\n}\n\nexport default HighLevelStatus;\n","import React, { Component } from 'react';\nimport './App.scss';\nimport StatusList from './components/StatusList/StatusList';\nimport UpcomingList from './components/UpcomingList/UpcomingList';\nimport CurrentVersion from './components/CurrentVersion/CurrentVersion';\nimport HighLevelStatus from './components/HighLevelStatus/HighLevelStatus';\n\nclass App extends Component {\n    render(): JSX.Element {\n        return (\n            <div className='header-bar'>\n                <p>\n                    <span className='ibm'>IBM</span>\n                    <span className='page-title'>Blockchain Platform Extension for VS Code</span>\n                </p>\n\n                <div className='app-container'>\n                    <div className='heading-container'>\n                        <p className='status'>Status</p>\n                        <p className='title'>IBM Blockchain Platform Extension for VS Code</p>\n                        <CurrentVersion/>\n                        <HighLevelStatus/>\n                        <p className='description'>Check this page for information on any current incidents effecting the latest version of the IBM Blockchain Platform extension for Visual Studio Code, as well as planned content for the next release.</p>\n                    </div>\n                    <div className='issues-container'>\n                        <StatusList></StatusList>\n                    </div>\n\n                    <div className='issues-container'>\n                        <UpcomingList></UpcomingList>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}