{
    "name": "ibm-blockchain-platform",
    "displayName": "IBM Blockchain Platform",
    "description": "End to end extension for Hyperledger Fabric developers. Develop and test your blockchain smart contracts and client applications on your local machine, and package your projects for deployment into IBM Blockchain Platform runtimes.",
    "author": "IBMBlockchain",
    "keywords": [
        "blockchain",
        "smart contracts",
        "distributed ledger technology",
        "Hyperledger Fabric",
        "IBM Blockchain Platform"
    ],
    "homepage": "https://www.ibm.com/blockchain",
    "license": "Apache-2.0",
    "version": "0.1.3",
    "publisher": "IBMBlockchain",
    "icon": "resources/blockchain_marketplace.png",
    "galleryBanner": {
        "color": "#313131",
        "theme": "dark"
    },
    "production": false,
    "engines": {
        "vscode": "^1.26.0"
    },
    "repository": {
        "type": "git",
        "url": "https://github.com/IBM-Blockchain/blockchain-vscode-extension"
    },
    "categories": [
        "Programming Languages",
        "Debuggers",
        "Other"
    ],
    "generatorFabricVersion": "~0.0.13",
    "activationEvents": [
    "*"
    ],
    "actualActivationEvents": {
        "other": [
            "onDebug"
        ],
        "onView": [
            "blockchainExplorer"
        ],
        "onCommand": [
            "blockchainConnectionsExplorer.addConnectionEntry",
            "blockchainConnectionsExplorer.deleteConnectionEntry",
            "blockchainConnectionsExplorer.addConnectionIdentityEntry",
            "blockchainConnectionsExplorer.connectEntry",
            "blockchainConnectionsExplorer.disconnectEntry",
            "blockchainConnectionsExplorer.refreshEntry",
            "blockchain.createSmartContractProjectEntry",
            "blockchainExplorer.installSmartContractEntry",
            "blockchainExplorer.instantiateSmartContractEntry",
            "blockchainAPackageExplorer.refreshEntry",
            "blockchainAPackageExplorer.packageSmartContractProjectEntry",
            "blockchainAPackageExplorer.deleteSmartContractPackageEntry",
            "blockchainAPackageExplorer.exportSmartContractPackageEntry",
            "blockchainARuntimeExplorer.refreshEntry",
            "blockchainExplorer.startFabricRuntime",
            "blockchainExplorer.stopFabricRuntime",
            "blockchainExplorer.restartFabricRuntime",
            "blockchainExplorer.teardownFabricRuntime",
            "blockchainExplorer.toggleFabricRuntimeDevMode",
            "blockchainExplorer.openFabricRuntimeTerminal",
            "blockchainConnectionsExplorer.exportConnectionDetailsEntry",
            "blockchainConnectionsExplorer.editConnectionEntry",
            "blockchainConnectionsExplorer.testSmartContractEntry",
            "blockchainConnectionsExplorer.submitTransactionEntry",
            "blockchainExplorer.upgradeSmartContractEntry"
        ]
    },
    "main": "./out/src/extension",
    "contributes": {
        "viewsContainers": {
            "activitybar": [
                {
                    "id": "blockchain-explorer",
                    "title": "IBM Blockchain Platform",
                    "icon": "resources/blockchain_activitybar.svg"
                }
            ]
        },
        "views": {
            "blockchain-explorer": [
                {
                    "id": "blockchainAPackageExplorer",
                    "name": "Smart Contract Packages"
                },
                {
                    "id": "blockchainARuntimeExplorer",
                    "name": "Local_Fabric Control Panel"
                },
                {
                    "id": "blockchainExplorer",
                    "name": "Blockchain Connections"
                }
            ]
        },
        "configuration": {
            "type": "object",
            "title": "Blockchain configuration",
            "properties": {
                "fabric.connections": {
                    "type": "array",
                    "default": [],
                    "description": "Configurations for connecting to a Blockchain network"
                },
                "fabric.runtimes": {
                    "type": "array",
                    "default": [],
                    "description": "Configurations for managed Blockchain network runtimes"
                },
                "blockchain.ext.directory": {
                    "type": "string",
                    "default": "~/.fabric-vscode",
                    "description": "Configurations for IBM Blockchain extension directory"
                },
                "blockchain.repositories": {
                    "type": "array",
                    "default": [],
                    "description": "Repositories for accessing samples stored on disk"
                },
                "extension.home.showOnStartup": {
                    "type": "boolean",
                    "default": true,
                    "description": "Show home page when clicking on extension for the first time"
                }
            }
        },
        "commands": [
            {
                "command": "sample.open",
                "title": "Open sample",
                "category": "IBM Blockchain Platform"
            },
            {
                "command": "extensionHome.open",
                "title": "View Homepage",
                "category": "IBM Blockchain Platform"
            },
            {
                "command": "blockchainConnectionsExplorer.refreshEntry",
                "title": "Refresh Blockchain Connections",
                "icon": {
                    "light": "resources/light/refresh_light.svg",
                    "dark": "resources/dark/refresh.svg"
                },
                "category": "IBM Blockchain Platform"
            },
            {
                "command": "blockchainConnectionsExplorer.connectEntry",
                "title": "Connect To A Blockchain",
                "category": "IBM Blockchain Platform"
            },
            {
                "command": "blockchainConnectionsExplorer.disconnectEntry",
                "title": "Disconnect From A Blockchain",
                "icon": {
                    "light": "resources/light/back_light.svg",
                    "dark": "resources/dark/back.svg"
                },
                "category": "IBM Blockchain Platform"
            },
            {
                "command": "blockchainConnectionsExplorer.addConnectionEntry",
                "title": "Add Connection",
                "icon": {
                    "light": "resources/light/add_light.svg",
                    "dark": "resources/dark/add.svg"
                },
                "category": "IBM Blockchain Platform"
            },
            {
                "command": "blockchainConnectionsExplorer.deleteConnectionEntry",
                "title": "Delete Connection",
                "category": "IBM Blockchain Platform"
            },
            {
                "command": "blockchainConnectionsExplorer.addConnectionIdentityEntry",
                "title": "Add Identity To Connection",
                "category": "IBM Blockchain Platform"
            },
            {
                "command": "blockchain.createSmartContractProjectEntry",
                "title": "Create Smart Contract Project",
                "category": "IBM Blockchain Platform"
            },
            {
                "command": "blockchainARuntimeExplorer.refreshEntry",
                "title": "Refresh Blockchain Runtime",
                "icon": {
                    "light": "resources/light/refresh_light.svg",
                    "dark": "resources/dark/refresh.svg"
                },
                "category": "IBM Blockchain Platform"
            },
            {
                "command": "blockchainExplorer.installSmartContractEntry",
                "title": "Install Smart Contract",
                "category": "IBM Blockchain Platform"
            },
            {
                "command": "blockchainExplorer.instantiateSmartContractEntry",
                "title": "Instantiate Smart Contract",
                "category": "IBM Blockchain Platform"
            },
            {
                "command": "blockchainAPackageExplorer.refreshEntry",
                "title": "Refresh Smart Contract Packages",
                "icon": {
                    "light": "resources/light/refresh_light.svg",
                    "dark": "resources/dark/refresh.svg"
                },
                "category": "IBM Blockchain Platform"
            },
            {
                "command": "blockchainAPackageExplorer.packageSmartContractProjectEntry",
                "title": "Package a Smart Contract Project",
                "icon": {
                    "light": "resources/light/add_light.svg",
                    "dark": "resources/dark/add.svg"
                },
                "category": "IBM Blockchain Platform"
            },
            {
                "command": "blockchainExplorer.startFabricRuntime",
                "title": "Start Fabric Runtime",
                "category": "IBM Blockchain Platform"
            },
            {
                "command": "blockchainExplorer.stopFabricRuntime",
                "title": "Stop Fabric Runtime",
                "category": "IBM Blockchain Platform"
            },
            {
                "command": "blockchainExplorer.restartFabricRuntime",
                "title": "Restart Fabric Runtime",
                "category": "IBM Blockchain Platform"
            },
            {
                "command": "blockchainExplorer.teardownFabricRuntime",
                "title": "Teardown Fabric Runtime",
                "category": "IBM Blockchain Platform"
            },
            {
                "command": "blockchainExplorer.toggleFabricRuntimeDevMode",
                "title": "Toggle Development Mode",
                "category": "IBM Blockchain Platform"
            },
            {
                "command": "blockchainExplorer.openFabricRuntimeTerminal",
                "title": "Open Fabric Runtime Terminal",
                "category": "IBM Blockchain Platform"
            },
            {
                "command": "blockchainAPackageExplorer.deleteSmartContractPackageEntry",
                "title": "Delete Package",
                "category": "IBM Blockchain Platform"
            },
            {
                "command": "blockchainAPackageExplorer.exportSmartContractPackageEntry",
                "title": "Export Package",
                "category": "IBM Blockchain Platform"
            },
            {
                "command": "blockchainConnectionsExplorer.editConnectionEntry",
                "title": "Edit Connection",
                "category": "IBM Blockchain Platform"
            },
            {
                "command": "blockchainConnectionsExplorer.testSmartContractEntry",
                "title": "Generate Smart Contract Tests",
                "category": "IBM Blockchain Platform"
            },
            {
                "command": "blockchainExplorer.upgradeSmartContractEntry",
                "title": "Upgrade Smart Contract",
                "category": "IBM Blockchain Platform"
            },
            {
                "command": "blockchainConnectionsExplorer.submitTransactionEntry",
                "title": "Submit Transaction",
                "category": "IBM Blockchain Platform"
            },
            {
                "command": "blockchainConnectionsExplorer.exportConnectionDetailsEntry",
                "title": "Export Connection Details",
                "category": "IBM Blockchain Platform"
            }
        ],
        "menus": {
            "commandPalette": [
                {
                    "command": "blockchainExplorer.startFabricRuntime"
                },
                {
                    "command": "blockchainExplorer.stopFabricRuntime"
                },
                {
                    "command": "blockchainExplorer.restartFabricRuntime"
                },
                {
                    "command": "blockchainExplorer.teardownFabricRuntime"
                },
                {
                    "command": "blockchainExplorer.toggleFabricRuntimeDevMode"
                },
                {
                    "command": "blockchainExplorer.openFabricRuntimeTerminal"
                },
                {
                    "command": "sample.open",
                    "when": "false"
                }
            ],
            "view/title": [
                {
                    "command": "blockchainConnectionsExplorer.addConnectionEntry",
                    "when": "view == blockchainExplorer && !blockchain-connected",
                    "group": "navigation"
                },
                {
                    "command": "blockchainConnectionsExplorer.disconnectEntry",
                    "when": "view == blockchainExplorer && blockchain-connected",
                    "group": "navigation"
                },
                {
                    "command": "blockchainConnectionsExplorer.refreshEntry",
                    "when": "view == blockchainExplorer",
                    "group": "navigation"
                },
                {
                    "command": "blockchainARuntimeExplorer.refreshEntry",
                    "when": "view == blockchainARuntimeExplorer",
                    "group": "navigation"
                },
                {
                    "command": "blockchainAPackageExplorer.refreshEntry",
                    "when": "view == blockchainAPackageExplorer",
                    "group": "navigation"
                },
                {
                    "command": "blockchainAPackageExplorer.packageSmartContractProjectEntry",
                    "when": "view == blockchainAPackageExplorer",
                    "group": "navigation"
                },
                {
                    "command": "blockchainExplorer.startFabricRuntime",
                    "when": "view == blockchainARuntimeExplorer && !blockchain-started",
                    "group": "blockchain"
                },
                {
                    "command": "blockchainExplorer.stopFabricRuntime",
                    "when": "view == blockchainARuntimeExplorer && blockchain-started",
                    "group": "blockchain"
                },
                {
                    "command": "blockchainExplorer.restartFabricRuntime",
                    "when": "view == blockchainARuntimeExplorer && blockchain-started",
                    "group": "blockchain"
                },
                {
                    "command": "blockchainExplorer.teardownFabricRuntime",
                    "when": "view == blockchainARuntimeExplorer",
                    "group": "blockchain"
                }
            ],
            "view/item/context": [
                {
                    "command": "blockchainConnectionsExplorer.deleteConnectionEntry",
                    "when": "view == blockchainExplorer && viewItem == blockchain-connection-item"
                },
                {
                    "command": "blockchainConnectionsExplorer.addConnectionIdentityEntry",
                    "when": "view == blockchainExplorer && viewItem == blockchain-connection-item"
                },
                {
                    "command": "blockchainExplorer.toggleFabricRuntimeDevMode",
                    "when": "view == blockchainARuntimeExplorer && viewItem == blockchain-runtime-item-stopped"
                },
                {
                    "command": "blockchainExplorer.toggleFabricRuntimeDevMode",
                    "when": "view == blockchainARuntimeExplorer && viewItem == blockchain-runtime-item-removed"
                },
                {
                    "command": "blockchainExplorer.openFabricRuntimeTerminal",
                    "when": "view == blockchainARuntimeExplorer && viewItem == blockchain-runtime-item-started"
                },
                {
                    "command": "blockchainExplorer.openFabricRuntimeTerminal",
                    "when": "view == blockchainARuntimeExplorer && viewItem == blockchain-connected-runtime-item"
                },
                {
                    "command": "blockchainConnectionsExplorer.exportConnectionDetailsEntry",
                    "when": "view == blockchainExplorer && viewItem == blockchain-runtime-item-started"
                },
                {
                    "command": "blockchainConnectionsExplorer.exportConnectionDetailsEntry",
                    "when": "view == blockchainExplorer && viewItem == blockchain-connected-runtime-item"
                },
                {
                    "command": "blockchainAPackageExplorer.deleteSmartContractPackageEntry",
                    "when": "view == blockchainAPackageExplorer && viewItem == blockchain-package-item"
                },
                {
                    "command": "blockchainAPackageExplorer.exportSmartContractPackageEntry",
                    "when": "view == blockchainAPackageExplorer && viewItem == blockchain-package-item"
                },
                {
                    "command": "blockchainExplorer.installSmartContractEntry",
                    "when": "view == blockchainARuntimeExplorer && viewItem == blockchain-peer-item"
                },
                {
                    "command": "blockchainExplorer.instantiateSmartContractEntry",
                    "when": "view == blockchainARuntimeExplorer && viewItem == blockchain-channel-item"
                },
                {
                    "command": "blockchainConnectionsExplorer.editConnectionEntry",
                    "when": "view == blockchainExplorer && viewItem == blockchain-connection-item"
                },
                {
                    "command": "blockchainConnectionsExplorer.testSmartContractEntry",
                    "when": "view == blockchainExplorer && viewItem == blockchain-instantiated-chaincode-item"
                },
                {
                    "command": "blockchainConnectionsExplorer.submitTransactionEntry",
                    "when": "view == blockchainExplorer && viewItem == blockchain-transaction-item"
                },
                {
                    "command": "blockchainExplorer.upgradeSmartContractEntry",
                    "when": "view == blockchainARuntimeExplorer && viewItem == blockchain-instantiated-chaincode-item"
                }
            ]
        },
        "debuggers": [
            {
                "type": "fabric:node",
                "label": "Debug a Hyperledger Fabric Smart Contract",
                "runtime": "node",
                "configurationAttributes": {
                    "launch": {
                        "properties": {
                            "program": {
                                "type": "string",
                                "description": "Absolute path to a text file.",
                                "default": "${workspaceFolder}/node_modules/bin/fabric-chaincode-node"
                            },
                            "cwd": {
                                "type": "string",
                                "description": "The current working directory",
                                "default": "${workspaceFolder}"
                            },
                            "args": {
                                "type": "array",
                                "description": "The arguments to give to the Fabric runtime",
                                "default": []
                            },
                            "env": {
                                "type": "object",
                                "description": "The environment variables to give to the Fabric runtime",
                                "default": {}
                            },
                            "stopOnEntry": {
                                "type": "boolean",
                                "description": "Automatically stop program after launch.",
                                "default": true
                            },
                            "sourceMaps": {
                                "type": "boolean",
                                "description": "Use JavaScript source maps (if they exist).",
                                "default": true
                            },
                            "outFiles": {
                                "type": "array",
                                "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with '!' the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                                "items": {
                                    "type": "string"
                                },
                                "default": [
                                    "${workspaceFolder}/dist/**/*.js"
                                ]
                            },
                            "smartStep": {
                                "type": "boolean",
                                "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                                "default": true
                            },
                            "skipFiles": {
                                "type": "array",
                                "description": "An array of file or folder names, or glob patterns, to skip when debugging.",
                                "items": {
                                    "type": "string"
                                },
                                "default": []
                            },
                            "trace": {
                                "type": [
                                    "boolean",
                                    "string"
                                ],
                                "description": "When 'true', the debugger will log tracing info to a file. When 'verbose', it will also show logs in the console.",
                                "default": true
                            }
                        }
                    }
                },
                "initialConfigurations": [
                    {
                        "type": "fabric:node",
                        "request": "launch",
                        "name": "Debug Smart Contract"
                    }
                ],
                "configurationSnippets": [
                    {
                        "label": "Fabric Debug: Launch",
                        "description": "A new configuration for 'debugging' a smart contract.",
                        "body": {
                            "type": "fabric:node",
                            "request": "launch",
                            "name": "Debug Smart Contract"
                        }
                    }
                ]
            }
        ]
    },
    "scripts": {
        "vscode:prepublish": "npm run compile",
        "package": "node ./node_modules/vsce/out/vsce package",
        "compile": "rimraf out && tsc -p ./",
        "watch": "rimraf out && tsc -watch -p ./",
        "postinstall": "node ./node_modules/vscode/bin/install",
        "pretest": "npm run compile && npm run lint && npm run licchk && npm run updatePackageJSON",
        "test": "node ./node_modules/vscode/bin/test --verbose",
        "posttest": "remap-istanbul -i ./coverage/coverage.json -o ./coverage/coverage-remap.json && istanbul check-coverage ./coverage/coverage-remap.json",
        "systest": "node ./node_modules/vscode/bin/test --verbose",
        "licchk": "license-check-and-add",
        "tslint": "tslint",
        "lint": "npm run tslint 'src/**/*.ts' 'test/**/*.test.ts' 'integrationTest/tests/integration.test.ts' 'integrationTest/nodeTests/integrationNode.test.ts'",
        "updatePackageJSON": "node ../.travis/rewritePackageJson.js",
        "productionFlag": "node ../.travis/rewritePackageJson.js publish",
        "integrationTests": "./integrationTest/scripts/start-integration-tests.sh && npm run compile"
    },
    "devDependencies": {
        "@types/chai": "4.1.4",
        "@types/chai-as-promised": "7.1.0",
        "@types/dateformat": "^1.0.1",
        "@types/dockerode": "^2.5.5",
        "@types/fs-extra": "^5.0.4",
        "@types/glob": "5.0.35",
        "@types/mocha": "5.2.5",
        "@types/node": "10.5.4",
        "@types/rimraf": "^2.0.2",
        "@types/semver": "^5.5.0",
        "@types/sinon": "5.0.1",
        "@types/sinon-chai": "3.2.0",
        "@types/strip-ansi": "^3.0.0",
        "@types/tmp": "0.0.33",
        "angular-tslint-rules": "1.5.0",
        "chai": "4.1.2",
        "chai-as-promised": "7.1.1",
        "decache": "4.4.0",
        "glob": "7.1.2",
        "istanbul": "0.4.5",
        "license-check-and-add": "2.3.6",
        "mocha": "5.2.0",
        "nyc": "^12.0.2",
        "remap-istanbul": "0.11.1",
        "rimraf": "^2.6.2",
        "sinon": "6.1.4",
        "sinon-chai": "3.2.0",
        "tmp": "0.0.33",
        "ts-node": "7.0.0",
        "tslint": "5.11.0",
        "tslint-loader": "3.6.0",
        "typescript": "3.0.1",
        "vsce": "^1.46.0",
        "vscode": "1.1.21",
        "yo": "^2.0.5"
    },
    "dependencies": {
        "@fidm/x509": "1.1.3",
        "ajv": "^5.5.2",
        "axios": "^0.18.0",
        "child-process-promise": "^2.2.1",
        "dateformat": "^3.0.3",
        "dockerode": "^2.5.5",
        "ejs": "^2.6.1",
        "find-free-port": "^2.0.0",
        "fs-extra": "^7.0.0",
        "home-dir": "1.0.0",
        "semver": "^5.6.0",
        "shelljs": "^0.8.3",
        "showdown": "^1.9.0",
        "strip-ansi": "^4.0.0",
        "uuid": "^3.3.2",
        "vscode-extension-telemetry": "0.0.20",
        "yeoman-environment": "^2.3.3"
    },
    "optionalDependencies": {
        "fabric-ca-client": "1.4.0",
        "fabric-client": "1.4.0",
        "fabric-network": "1.4.0"
    },
    "nativeDependencies": {
        "grpc": {
            "linux-ia32": {
                "original": "./node_modules/grpc/src/node/extension_binary/node-v57-linux-ia32-glibc",
                "new": "./node_modules/grpc/src/node/extension_binary/electron-v2.0-linux-ia32-glibc"
            },
            "linux-x64": {
                "original": "./node_modules/grpc/src/node/extension_binary/node-v57-linux-x64-glibc",
                "new": "./node_modules/grpc/src/node/extension_binary/electron-v2.0-linux-x64-glibc"
            },
            "darwin-x64": {
                "original": "./node_modules/grpc/src/node/extension_binary/node-v57-darwin-x64-unknown",
                "new": "./node_modules/grpc/src/node/extension_binary/electron-v2.0-darwin-x64-unknown"
            },
            "win32-ia32": {
                "original": "./node_modules/grpc/src/node/extension_binary/node-v57-win32-ia32-unknown",
                "new": "./node_modules/grpc/src/node/extension_binary/electron-v2.0-win32-ia32-unknown"
            },
            "win32-x64": {
                "original": "./node_modules/grpc/src/node/extension_binary/node-v57-win32-x64-unknown",
                "new": "./node_modules/grpc/src/node/extension_binary/electron-v2.0-win32-x64-unknown"
            }
        }
    },
    "extensionPack": [
        "legfrey.javascript-test-runner"
    ],
    "license-check-and-add-config": {
        "folder": ".",
        "license": "LICENSE.txt",
        "exact_paths_method": "EXCLUDE",
        "exact_paths": [
            "node_modules",
            "out",
            ".vscode-test",
            "coverage",
            "resources",
            "test/data",
            ".DS_Store",
            "config/.DS_Store",
            "test/.DS_Store",
            "integrationTest/data",
            "integrationTest/tmp",
            "integrationTest/nodeTests/data",
            "basic-network",
            "CHANGELOG.md",
            "templates/tsTestSmartContractTemplate.ejs",
            "templates/jsTestSmartContractTemplate.ejs",
            "templates/HomeView.ejs",
            "templates/SampleView.ejs"
        ],
        "file_type_method": "EXCLUDE",
        "file_types": [
            ".txt",
            ".vsix",
            ".yml",
            ".yml",
            ".yaml",
            ".tgz",
            ".key",
            ".gz",
            ".pem",
            ".crt",
            ".tx",
            ".block",
            ".log",
            ".pid",
            ".port"
        ],
        "insert_license": false,
        "clear_license": false,
        "license_formats": {
            "ts|acl|cto|js|qry": {
                "prepend": "/*",
                "append": "*/",
                "eachLine": {
                    "prepend": " * "
                }
            },
            "vscodeignore": {
                "eachLine": {
                    "prepend": "# "
                }
            },
            "md": {
                "file": "../markdown-license.txt"
            }
        }
    }
}