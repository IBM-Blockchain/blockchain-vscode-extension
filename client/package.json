{
    "name": "ibm-blockchain-platform",
    "displayName": "IBM Blockchain Platform",
    "description": "End to end extension for Hyperledger Fabric developers. Develop and test your blockchain smart contracts and client applications on your local machine, and package your projects for deployment into IBM Blockchain Platform runtimes.",
    "author": "IBMBlockchain",
    "keywords": [
        "blockchain",
        "smart contracts",
        "distributed ledger technology",
        "Hyperledger Fabric",
        "IBM Blockchain Platform"
    ],
    "homepage": "https://www.ibm.com/blockchain",
    "license": "Apache-2.0",
    "version": "0.3.3",
    "publisher": "IBMBlockchain",
    "icon": "resources/blockchain_marketplace.png",
    "galleryBanner": {
        "color": "#313131",
        "theme": "dark"
    },
    "production": false,
    "engines": {
        "vscode": "^1.31.0"
    },
    "repository": {
        "type": "git",
        "url": "https://github.com/IBM-Blockchain/blockchain-vscode-extension"
    },
    "categories": [
        "Programming Languages",
        "Debuggers",
        "Other"
    ],
    "activationEvents": [
        "*"
    ],
    "actualActivationEvents": {
        "other": [
            "onDebug"
        ],
        "onView": [
            "blockchainExplorer"
        ],
        "onCommand": [
            "gatewaysExplorer.addGatewayEntry",
            "gatewaysExplorer.deleteGatewayEntry",
            "gatewaysExplorer.connectEntry",
            "gatewaysExplorer.disconnectEntry",
            "gatewaysExplorer.refreshEntry",
            "gatewaysExplorer.editGatewayEntry",
            "gatewaysExplorer.testSmartContractEntry",
            "gatewaysExplorer.submitTransactionEntry",
            "gatewaysExplorer.evaluateTransactionEntry",
            "aPackagesExplorer.createSmartContractProjectEntry",
            "aPackagesExplorer.packageSmartContractProjectEntry",
            "aPackagesExplorer.deleteSmartContractPackageEntry",
            "aPackagesExplorer.exportSmartContractPackageEntry",
            "aPackagesExplorer.importSmartContractPackageEntry",
            "aPackagesExplorer.refreshEntry",
            "aRuntimeOpsExplorer.installSmartContractEntry",
            "aRuntimeOpsExplorer.instantiateSmartContractEntry",
            "aRuntimeOpsExplorer.refreshEntry",
            "aRuntimeOpsExplorer.startFabricRuntime",
            "aRuntimeOpsExplorer.stopFabricRuntime",
            "aRuntimeOpsExplorer.restartFabricRuntime",
            "aRuntimeOpsExplorer.teardownFabricRuntime",
            "aRuntimeOpsExplorer.toggleFabricRuntimeDevMode",
            "aRuntimeOpsExplorer.openFabricRuntimeTerminal",
            "aRuntimeOpsExplorer.exportConnectionDetailsEntry",
            "aRuntimeOpsExplorer.upgradeSmartContractEntry",
            "aRuntimeOpsExplorer.createNewIdentityEntry",
            "walletExplorer.refreshEntry",
            "walletExplorer.addWalletEntry",
            "walletExplorer.addWalletIdentityEntry",
            "extensionHome.open"
        ]
    },
    "main": "./out/src/extension",
    "contributes": {
        "viewsContainers": {
            "activitybar": [
                {
                    "id": "blockchain-explorer",
                    "title": "IBM Blockchain Platform",
                    "icon": "resources/blockchain_activitybar.svg"
                }
            ]
        },
        "views": {
            "blockchain-explorer": [
                {
                    "id": "aPackagesExplorer",
                    "name": "Smart Contract Packages"
                },
                {
                    "id": "aRuntimeOpsExplorer",
                    "name": "Local Fabric Ops"
                },
                {
                    "id": "gatewaysExplorer",
                    "name": "Fabric Gateways"
                },
                {
                    "id": "walletExplorer",
                    "name": "Fabric Wallets"
                }
            ]
        },
        "configuration": {
            "type": "object",
            "title": "Blockchain configuration",
            "properties": {
                "fabric.gateways": {
                    "type": "array",
                    "default": [],
                    "description": "Gateways for connecting to a Blockchain network"
                },
                "fabric.wallets": {
                    "type": "array",
                    "default": [],
                    "description": "Wallets for connecting to a Blockchain network"
                },
                "fabric.runtime": {
                    "type": "object",
                    "default": {},
                    "description": "Configurations for the local Blockchain managed runtime"
                },
                "blockchain.ext.directory": {
                    "type": "string",
                    "default": "~/.fabric-vscode",
                    "description": "Configurations for IBM Blockchain extension directory"
                },
                "blockchain.repositories": {
                    "type": "array",
                    "default": [],
                    "description": "Repositories for accessing samples stored on disk"
                },
                "extension.home.showOnStartup": {
                    "type": "boolean",
                    "default": true,
                    "description": "Show home page when clicking on extension for the first time"
                }
            }
        },
        "commands": [
            {
                "command": "sample.open",
                "title": "Open Sample",
                "category": "IBM Blockchain Platform"
            },
            {
                "command": "extensionHome.open",
                "title": "View Homepage",
                "category": "IBM Blockchain Platform",
                "icon": {
                    "light": "resources/icon_light.svg",
                    "dark": "resources/icon_dark.svg"
                }
            },
            {
                "command": "gatewaysExplorer.refreshEntry",
                "title": "Refresh Fabric Gateways",
                "icon": {
                    "light": "resources/light/refresh_light.svg",
                    "dark": "resources/dark/refresh.svg"
                },
                "category": "IBM Blockchain Platform"
            },
            {
                "command": "gatewaysExplorer.connectEntry",
                "title": "Connect Via Gateway",
                "category": "IBM Blockchain Platform"
            },
            {
                "command": "gatewaysExplorer.disconnectEntry",
                "title": "Disconnect from Gateway",
                "icon": {
                    "light": "resources/light/back_light.svg",
                    "dark": "resources/dark/back.svg"
                },
                "category": "IBM Blockchain Platform"
            },
            {
                "command": "gatewaysExplorer.addGatewayEntry",
                "title": "Add Gateway",
                "icon": {
                    "light": "resources/light/add_light.svg",
                    "dark": "resources/dark/add.svg"
                },
                "category": "IBM Blockchain Platform"
            },
            {
                "command": "gatewaysExplorer.deleteGatewayEntry",
                "title": "Delete Gateway",
                "category": "IBM Blockchain Platform"
            },
            {
                "command": "walletExplorer.addWalletIdentityEntry",
                "title": "Add Identity To Wallet",
                "category": "IBM Blockchain Platform"
            },
            {
                "command": "aPackagesExplorer.createSmartContractProjectEntry",
                "title": "%blockchain.createSmartContractProjectEntry.title%",
                "category": "IBM Blockchain Platform"
            },
            {
                "command": "aRuntimeOpsExplorer.refreshEntry",
                "title": "Refresh Local Fabric Ops",
                "icon": {
                    "light": "resources/light/refresh_light.svg",
                    "dark": "resources/dark/refresh.svg"
                },
                "category": "IBM Blockchain Platform"
            },
            {
                "command": "aRuntimeOpsExplorer.installSmartContractEntry",
                "title": "Install Smart Contract",
                "category": "IBM Blockchain Platform"
            },
            {
                "command": "aRuntimeOpsExplorer.instantiateSmartContractEntry",
                "title": "Instantiate Smart Contract",
                "category": "IBM Blockchain Platform"
            },
            {
                "command": "aPackagesExplorer.refreshEntry",
                "title": "Refresh Smart Contract Packages",
                "icon": {
                    "light": "resources/light/refresh_light.svg",
                    "dark": "resources/dark/refresh.svg"
                },
                "category": "IBM Blockchain Platform"
            },
            {
                "command": "aPackagesExplorer.packageSmartContractProjectEntry",
                "title": "Package a Smart Contract Project",
                "icon": {
                    "light": "resources/light/add_light.svg",
                    "dark": "resources/dark/add.svg"
                },
                "category": "IBM Blockchain Platform"
            },
            {
                "command": "aRuntimeOpsExplorer.startFabricRuntime",
                "title": "Start Fabric Runtime",
                "category": "IBM Blockchain Platform"
            },
            {
                "command": "aRuntimeOpsExplorer.stopFabricRuntime",
                "title": "Stop Fabric Runtime",
                "category": "IBM Blockchain Platform"
            },
            {
                "command": "aRuntimeOpsExplorer.restartFabricRuntime",
                "title": "Restart Fabric Runtime",
                "category": "IBM Blockchain Platform"
            },
            {
                "command": "aRuntimeOpsExplorer.teardownFabricRuntime",
                "title": "Teardown Fabric Runtime",
                "category": "IBM Blockchain Platform"
            },
            {
                "command": "aRuntimeOpsExplorer.toggleFabricRuntimeDevMode",
                "title": "Toggle Development Mode",
                "category": "IBM Blockchain Platform"
            },
            {
                "command": "aRuntimeOpsExplorer.openFabricRuntimeTerminal",
                "title": "Open Fabric Runtime Terminal",
                "category": "IBM Blockchain Platform"
            },
            {
                "command": "aPackagesExplorer.deleteSmartContractPackageEntry",
                "title": "Delete Package",
                "category": "IBM Blockchain Platform"
            },
            {
                "command": "aPackagesExplorer.exportSmartContractPackageEntry",
                "title": "Export Package",
                "category": "IBM Blockchain Platform"
            },
            {
                "command": "aPackagesExplorer.importSmartContractPackageEntry",
                "title": "Import Package",
                "category": "IBM Blockchain Platform"
            },
            {
                "command": "gatewaysExplorer.editGatewayEntry",
                "title": "Edit Gateway",
                "category": "IBM Blockchain Platform"
            },
            {
                "command": "gatewaysExplorer.testSmartContractEntry",
                "title": "Generate Smart Contract Tests",
                "category": "IBM Blockchain Platform"
            },
            {
                "command": "aRuntimeOpsExplorer.upgradeSmartContractEntry",
                "title": "Upgrade Smart Contract",
                "category": "IBM Blockchain Platform"
            },
            {
                "command": "gatewaysExplorer.submitTransactionEntry",
                "title": "Submit Transaction",
                "category": "IBM Blockchain Platform"
            },
            {
                "command": "gatewaysExplorer.evaluateTransactionEntry",
                "title": "Evaluate Transaction",
                "category": "IBM Blockchain Platform"
            },
            {
                "command": "aRuntimeOpsExplorer.exportConnectionDetailsEntry",
                "title": "Export Connection Details",
                "category": "IBM Blockchain Platform"
            },
            {
                "command": "aRuntimeOpsExplorer.createNewIdentityEntry",
                "title": "Create Identity (register and enroll)",
                "category": "IBM Blockchain Platform"
            },
            {
                "command": "walletExplorer.refreshEntry",
                "title": "Refresh Fabric Wallets",
                "icon": {
                    "light": "resources/light/refresh_light.svg",
                    "dark": "resources/dark/refresh.svg"
                },
                "category": "IBM Blockchain Platform"
            },
            {
                "command": "walletExplorer.addWalletEntry",
                "title": "Add Wallet",
                "icon": {
                    "light": "resources/light/add_light.svg",
                    "dark": "resources/dark/add.svg"
                },
                "category": "IBM Blockchain Platform"
            }
        ],
        "menus": {
            "editor/title": [
                {
                    "when": "!false",
                    "command": "extensionHome.open",
                    "alt": "extensionHome.open",
                    "group": "navigation"
                }
            ],
            "commandPalette": [
                {
                    "command": "aRuntimeOpsExplorer.startFabricRuntime"
                },
                {
                    "command": "aRuntimeOpsExplorer.stopFabricRuntime"
                },
                {
                    "command": "aRuntimeOpsExplorer.restartFabricRuntime"
                },
                {
                    "command": "aRuntimeOpsExplorer.teardownFabricRuntime"
                },
                {
                    "command": "aRuntimeOpsExplorer.toggleFabricRuntimeDevMode"
                },
                {
                    "command": "aRuntimeOpsExplorer.openFabricRuntimeTerminal"
                },
                {
                    "command": "sample.open",
                    "when": "false"
                }
            ],
            "view/title": [
                {
                    "command": "gatewaysExplorer.addGatewayEntry",
                    "when": "view == gatewaysExplorer && !blockchain-connected",
                    "group": "navigation"
                },
                {
                    "command": "gatewaysExplorer.disconnectEntry",
                    "when": "view == gatewaysExplorer && blockchain-connected",
                    "group": "navigation"
                },
                {
                    "command": "gatewaysExplorer.refreshEntry",
                    "when": "view == gatewaysExplorer",
                    "group": "navigation"
                },
                {
                    "command": "aRuntimeOpsExplorer.refreshEntry",
                    "when": "view == aRuntimeOpsExplorer",
                    "group": "navigation"
                },
                {
                    "command": "aPackagesExplorer.refreshEntry",
                    "when": "view == aPackagesExplorer",
                    "group": "navigation"
                },
                {
                    "command": "aPackagesExplorer.packageSmartContractProjectEntry",
                    "when": "view == aPackagesExplorer",
                    "group": "blockchain"
                },
                {
                    "command": "aPackagesExplorer.createSmartContractProjectEntry",
                    "when": "view == aPackagesExplorer",
                    "group": "blockchain"
                },
                {
                    "command": "aPackagesExplorer.importSmartContractPackageEntry",
                    "when": "view == aPackagesExplorer",
                    "group": "blockchain"
                },
                {
                    "command": "aRuntimeOpsExplorer.startFabricRuntime",
                    "when": "view == aRuntimeOpsExplorer && !blockchain-started",
                    "group": "blockchain"
                },
                {
                    "command": "aRuntimeOpsExplorer.stopFabricRuntime",
                    "when": "view == aRuntimeOpsExplorer && blockchain-started",
                    "group": "blockchain"
                },
                {
                    "command": "aRuntimeOpsExplorer.restartFabricRuntime",
                    "when": "view == aRuntimeOpsExplorer && blockchain-started",
                    "group": "blockchain"
                },
                {
                    "command": "aRuntimeOpsExplorer.teardownFabricRuntime",
                    "when": "view == aRuntimeOpsExplorer",
                    "group": "blockchain"
                },
                {
                    "command": "walletExplorer.refreshEntry",
                    "when": "view == walletExplorer",
                    "group": "navigation"
                },
                {
                    "command": "walletExplorer.addWalletEntry",
                    "when": "view == walletExplorer",
                    "group": "navigation"
                }
            ],
            "view/item/context": [
                {
                    "command": "gatewaysExplorer.deleteGatewayEntry",
                    "when": "view == gatewaysExplorer && viewItem == blockchain-gateway-item"
                },
                {
                    "command": "walletExplorer.addWalletIdentityEntry",
                    "when": "view == walletExplorer && viewItem == blockchain-wallet-item"
                },
                {
                    "command": "aPackagesExplorer.deleteSmartContractPackageEntry",
                    "when": "view == aPackagesExplorer && viewItem == blockchain-package-item"
                },
                {
                    "command": "aPackagesExplorer.exportSmartContractPackageEntry",
                    "when": "view == aPackagesExplorer && viewItem == blockchain-package-item"
                },
                {
                    "command": "aRuntimeOpsExplorer.installSmartContractEntry",
                    "when": "view == aRuntimeOpsExplorer && viewItem == blockchain-peer-item"
                },
                {
                    "command": "aRuntimeOpsExplorer.installSmartContractEntry",
                    "when": "view == aRuntimeOpsExplorer && viewItem == blockchain-runtime-installed-item"
                },
                {
                    "command": "aRuntimeOpsExplorer.openFabricRuntimeTerminal",
                    "when": "view == aRuntimeOpsExplorer && viewItem == blockchain-peer-item"
                },
                {
                    "command": "aRuntimeOpsExplorer.toggleFabricRuntimeDevMode",
                    "when": "view == aRuntimeOpsExplorer && viewItem == blockchain-peer-item"
                },
                {
                    "command": "aRuntimeOpsExplorer.exportConnectionDetailsEntry",
                    "when": "view == aRuntimeOpsExplorer && viewItem == blockchain-peer-item"
                },
                {
                    "command": "aRuntimeOpsExplorer.instantiateSmartContractEntry",
                    "when": "view == aRuntimeOpsExplorer && viewItem == blockchain-channel-item"
                },
                {
                    "command": "aRuntimeOpsExplorer.instantiateSmartContractEntry",
                    "when": "view == aRuntimeOpsExplorer && viewItem == blockchain-runtime-instantiated-item"
                },
                {
                    "command": "aRuntimeOpsExplorer.upgradeSmartContractEntry",
                    "when": "view == aRuntimeOpsExplorer && viewItem == blockchain-channel-item"
                },
                {
                    "command": "aRuntimeOpsExplorer.upgradeSmartContractEntry",
                    "when": "view == aRuntimeOpsExplorer && viewItem == blockchain-runtime-instantiated-item"
                },
                {
                    "command": "aRuntimeOpsExplorer.upgradeSmartContractEntry",
                    "when": "view == aRuntimeOpsExplorer && viewItem == blockchain-instantiated-contract-item"
                },
                {
                    "command": "aRuntimeOpsExplorer.upgradeSmartContractEntry",
                    "when": "view == aRuntimeOpsExplorer && viewItem == blockchain-instantiated-chaincode-item"
                },
                {
                    "command": "gatewaysExplorer.editGatewayEntry",
                    "when": "view == gatewaysExplorer && viewItem == blockchain-gateway-item"
                },
                {
                    "command": "gatewaysExplorer.testSmartContractEntry",
                    "when": "view == gatewaysExplorer && viewItem == blockchain-instantiated-contract-item"
                },
                {
                    "command": "gatewaysExplorer.submitTransactionEntry",
                    "when": "view == gatewaysExplorer && viewItem == blockchain-transaction-item"
                },
                {
                    "command": "gatewaysExplorer.submitTransactionEntry",
                    "when": "view == gatewaysExplorer && viewItem == blockchain-instantiated-chaincode-item"
                },
                {
                    "command": "gatewaysExplorer.evaluateTransactionEntry",
                    "when": "view == gatewaysExplorer && viewItem == blockchain-transaction-item"
                },
                {
                    "command": "gatewaysExplorer.evaluateTransactionEntry",
                    "when": "view == gatewaysExplorer && viewItem == blockchain-instantiated-chaincode-item"
                },
                {
                    "command": "aRuntimeOpsExplorer.upgradeSmartContractEntry",
                    "when": "view == aRuntimeOpsExplorer && viewItem == blockchain-instantiated-chaincode-item"
                },
                {
                    "command": "aRuntimeOpsExplorer.createNewIdentityEntry",
                    "when": "view == aRuntimeOpsExplorer && viewItem == blockchain-runtime-certificate-authority-item"
                }
            ]
        },
        "debuggers": [
            {
                "type": "fabric:go",
                "label": "Debug a Hyperledger Fabric Smart Contract",
                "runtime": "node",
                "configurationAttributes": {
                    "launch": {
                        "required": [],
                        "properties": {
                            "program": {
                                "type": "string",
                                "description": "Path to the program folder (or any file within that folder) when in 'debug' or 'test' mode, and to the pre-built binary file to debug in 'exec' mode.",
                                "default": "${workspaceFolder}"
                            },
                            "mode": {
                                "enum": [
                                    "auto",
                                    "debug",
                                    "remote",
                                    "test",
                                    "exec"
                                ],
                                "description": "One of 'auto', 'debug', 'remote', 'test', 'exec'.",
                                "default": "auto"
                            },
                            "stopOnEntry": {
                                "type": "boolean",
                                "description": "Automatically stop program after launch.",
                                "default": false
                            },
                            "args": {
                                "type": "array",
                                "description": "Command line arguments passed to the program.",
                                "items": {
                                    "type": "string"
                                },
                                "default": []
                            },
                            "showLog": {
                                "type": "boolean",
                                "description": "Show log output from the delve debugger.",
                                "default": false
                            },
                            "cwd": {
                                "type": "string",
                                "description": "Workspace relative or absolute path to the working directory of the program being debugged. Default is the current workspace.",
                                "default": "."
                            },
                            "env": {
                                "type": "object",
                                "description": "Environment variables passed to the program.",
                                "default": {}
                            },
                            "buildFlags": {
                                "type": "string",
                                "description": "Build flags, to be passed to the Go compiler.",
                                "default": ""
                            },
                            "init": {
                                "type": "string",
                                "description": "Init file, executed by the terminal client.",
                                "default": ""
                            },
                            "remotePath": {
                                "type": "string",
                                "description": "If remote debugging, the path to the source code on the remote machine, if different from the local machine.",
                                "default": ""
                            },
                            "port": {
                                "type": "number",
                                "description": "The port that the delve debugger will be listening on.",
                                "default": 2345
                            },
                            "host": {
                                "type": "string",
                                "description": "The host name of the machine the delve debugger will be listening on.",
                                "default": "127.0.0.1"
                            },
                            "trace": {
                                "type": "string",
                                "enum": [
                                    "log",
                                    "verbose",
                                    "error"
                                ],
                                "default": "error",
                                "description": "Various levels of logging shown in the debug console. When set to 'log' or 'verbose', the logs will also be written to a file."
                            },
                            "envFile": {
                                "type": "string",
                                "description": "Absolute path to a file containing environment variable definitions.",
                                "default": "${workspaceFolder}/.env"
                            },
                            "backend": {
                                "type": "string",
                                "enum": [
                                    "default",
                                    "native",
                                    "lldb"
                                ],
                                "description": "Backend used by delve. Only available in delve version 0.12.2 and above."
                            },
                            "output": {
                                "type": "string",
                                "description": "Output path for the binary of delve",
                                "default": "debug"
                            },
                            "logOutput": {
                                "type": "string",
                                "enum": [
                                    "debugger",
                                    "gdbwire",
                                    "lldbout",
                                    "debuglineerr",
                                    "rpc"
                                ],
                                "description": "Comma separated list of components that should produce debug output.",
                                "default": "debugger"
                            },
                            "dlvLoadConfig": {
                                "type": "object",
                                "properties": {
                                    "followPointers": {
                                        "type": "boolean",
                                        "description": "FollowPointers requests pointers to be automatically dereferenced",
                                        "default": true
                                    },
                                    "maxVariableRecurse": {
                                        "type": "number",
                                        "description": "MaxVariableRecurse is how far to recurse when evaluating nested types",
                                        "default": 1
                                    },
                                    "maxStringLen": {
                                        "type": "number",
                                        "description": "MaxStringLen is the maximum number of bytes read from a string",
                                        "default": 64
                                    },
                                    "maxArrayValues": {
                                        "type": "number",
                                        "description": "MaxArrayValues is the maximum number of elements read from an array, a slice or a map",
                                        "default": 64
                                    },
                                    "maxStructFields": {
                                        "type": "number",
                                        "description": "MaxStructFields is the maximum number of fields read from a struct, -1 will read all fields",
                                        "default": -1
                                    }
                                },
                                "description": "LoadConfig describes to delve, how to load values from target's memory",
                                "default": {
                                    "followPointers": true,
                                    "maxVariableRecurse": 1,
                                    "maxStringLen": 64,
                                    "maxArrayValues": 64,
                                    "maxStructFields": -1
                                }
                            },
                            "apiVersion": {
                                "type": "number",
                                "enum": [
                                    1,
                                    2
                                ],
                                "description": "Delve Api Version to use. Default value is 2.",
                                "default": 2
                            },
                            "stackTraceDepth": {
                                "type": "number",
                                "description": "Maximum depth of stack trace collected from Delve",
                                "default": 50
                            },
                            "showGlobalVariables": {
                                "type": "boolean",
                                "default": true,
                                "description": "Boolean value to indicate whether global package variables should be shown in the variables pane or not."
                            }
                        }
                    }
                }
            },
            {
                "type": "fabric:java",
                "label": "Debug a Hyperledger Fabric Smart Contract",
                "runtime": "node",
                "configurationAttributes": {
                    "launch": {
                        "required": [
                            "mainClass"
                        ],
                        "properties": {
                            "projectName": {
                                "type": "string",
                                "description": "%java.debugger.launch.projectName.description%",
                                "default": ""
                            },
                            "mainClass": {
                                "type": "string",
                                "description": "%java.debugger.launch.mainClass.description%",
                                "default": ""
                            },
                            "args": {
                                "type": [
                                    "array",
                                    "string"
                                ],
                                "description": "%java.debugger.launch.args.description%",
                                "default": ""
                            },
                            "vmArgs": {
                                "type": [
                                    "array",
                                    "string"
                                ],
                                "description": "%java.debugger.launch.vmArgs.description%",
                                "default": ""
                            },
                            "modulePaths": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "description": "%java.debugger.launch.modulePaths.description%",
                                "default": []
                            },
                            "classPaths": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "description": "%java.debugger.launch.classPaths.description%",
                                "default": []
                            },
                            "sourcePaths": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "description": "%java.debugger.launch.sourcePaths.description%",
                                "default": []
                            },
                            "encoding": {
                                "type": "string",
                                "description": "%java.debugger.launch.encoding.description%",
                                "default": "UTF-8"
                            },
                            "cwd": {
                                "type": "string",
                                "description": "%java.debugger.launch.cwd.description%",
                                "default": "${workspaceFolder}"
                            },
                            "env": {
                                "type": "object",
                                "description": "%java.debugger.launch.env.description%",
                                "default": {}
                            },
                            "stopOnEntry": {
                                "type": "boolean",
                                "description": "%java.debugger.launch.stopOnEntry.description%",
                                "default": true
                            },
                            "console": {
                                "type": "string",
                                "enum": [
                                    "internalConsole",
                                    "integratedTerminal",
                                    "externalTerminal"
                                ],
                                "enumDescriptions": [
                                    "%java.debugger.launch.internalConsole.description%",
                                    "%java.debugger.launch.integratedTerminal.description%",
                                    "%java.debugger.launch.externalTerminal.description%"
                                ],
                                "description": "%java.debugger.launch.console.description%",
                                "default": "internalConsole"
                            },
                            "shortenCommandLine": {
                                "type": "string",
                                "enum": [
                                    "none",
                                    "jarmanifest",
                                    "argfile",
                                    "auto"
                                ],
                                "enumDescriptions": [
                                    "%java.debugger.launch.shortenCommandLine.none%",
                                    "%java.debugger.launch.shortenCommandLine.jarmanifest%",
                                    "%java.debugger.launch.shortenCommandLine.argfile%",
                                    "%java.debugger.launch.shortenCommandLine.auto%"
                                ],
                                "description": "%java.debugger.launch.shortenCommandLine.description%",
                                "default": "auto"
                            },
                            "stepFilters": {
                                "type": "object",
                                "description": "%java.debugger.launch.stepFilters.description%",
                                "default": {
                                    "classNameFilters": [
                                        "java.*",
                                        "javax.*",
                                        "com.sun.*",
                                        "sun.*",
                                        "sunw.*",
                                        "org.omg.*"
                                    ],
                                    "skipSynthetics": false,
                                    "skipStaticInitializers": false,
                                    "skipConstructors": false
                                },
                                "properties": {
                                    "classNameFilters": {
                                        "type": "array",
                                        "description": "%java.debugger.launch.classNameFilters.description%",
                                        "item": {
                                            "type": "string"
                                        },
                                        "default": [
                                            "java.*",
                                            "javax.*",
                                            "com.sun.*",
                                            "sun.*",
                                            "sunw.*",
                                            "org.omg.*"
                                        ]
                                    },
                                    "skipSynthetics": {
                                        "type": "boolean",
                                        "description": "%java.debugger.launch.skipSynthetics.description%",
                                        "default": true
                                    },
                                    "skipStaticInitializers": {
                                        "type": "boolean",
                                        "description": "%java.debugger.launch.skipStaticInitializers.description%",
                                        "default": true
                                    },
                                    "skipConstructors": {
                                        "type": "boolean",
                                        "description": "%java.debugger.launch.skipConstructors.description%",
                                        "default": true
                                    }
                                }
                            }
                        }
                    }
                }
            },
            {
                "type": "fabric:node",
                "label": "Debug a Hyperledger Fabric Smart Contract",
                "runtime": "node",
                "configurationAttributes": {
                    "launch": {
                        "properties": {
                            "program": {
                                "type": "string",
                                "description": "Absolute path to a text file.",
                                "default": "${workspaceFolder}/node_modules/bin/fabric-chaincode-node"
                            },
                            "cwd": {
                                "type": "string",
                                "description": "The current working directory",
                                "default": "${workspaceFolder}"
                            },
                            "args": {
                                "type": "array",
                                "description": "The arguments to give to the Fabric runtime",
                                "default": []
                            },
                            "env": {
                                "type": "object",
                                "description": "The environment variables to give to the Fabric runtime",
                                "default": {}
                            },
                            "stopOnEntry": {
                                "type": "boolean",
                                "description": "Automatically stop program after launch.",
                                "default": true
                            },
                            "sourceMaps": {
                                "type": "boolean",
                                "description": "Use JavaScript source maps (if they exist).",
                                "default": true
                            },
                            "outFiles": {
                                "type": "array",
                                "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with '!' the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                                "items": {
                                    "type": "string"
                                },
                                "default": [
                                    "${workspaceFolder}/dist/**/*.js"
                                ]
                            },
                            "smartStep": {
                                "type": "boolean",
                                "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                                "default": true
                            },
                            "skipFiles": {
                                "type": "array",
                                "description": "An array of file or folder names, or glob patterns, to skip when debugging.",
                                "items": {
                                    "type": "string"
                                },
                                "default": []
                            },
                            "trace": {
                                "type": [
                                    "boolean",
                                    "string"
                                ],
                                "description": "When 'true', the debugger will log tracing info to a file. When 'verbose', it will also show logs in the console.",
                                "default": true
                            }
                        }
                    }
                },
                "initialConfigurations": [
                    {
                        "type": "fabric:go",
                        "request": "launch",
                        "name": "Debug Smart Contract"
                    },
                    {
                        "type": "fabric:java",
                        "request": "launch",
                        "name": "Debug Smart Contract"
                    },
                    {
                        "type": "fabric:node",
                        "request": "launch",
                        "name": "Debug Smart Contract"
                    }
                ],
                "configurationSnippets": [
                    {
                        "label": "Fabric Debug (Go): Launch",
                        "description": "A new configuration for 'debugging' a smart contract.",
                        "body": {
                            "type": "fabric:go",
                            "request": "launch",
                            "name": "Debug Smart Contract"
                        }
                    },
                    {
                        "label": "Fabric Debug (Java): Launch",
                        "description": "A new configuration for 'debugging' a smart contract.",
                        "body": {
                            "type": "fabric:java",
                            "request": "launch",
                            "name": "Debug Smart Contract"
                        }
                    },
                    {
                        "label": "Fabric Debug (Node.js): Launch",
                        "description": "A new configuration for 'debugging' a smart contract.",
                        "body": {
                            "type": "fabric:node",
                            "request": "launch",
                            "name": "Debug Smart Contract"
                        }
                    }
                ]
            }
        ]
    },
    "scripts": {
        "vscode:prepublish": "npm run compile && npm run localize",
        "package": "node ./node_modules/vsce/out/vsce package",
        "compile": "rimraf out && tsc -p ./",
        "watch": "rimraf out && tsc -watch -p ./",
        "postinstall": "node ./node_modules/vscode/bin/install",
        "pretest": "npm run compile && npm run lint && npm run licchk && npm run updatePackageJSON",
        "test": "node ./node_modules/vscode/bin/test --verbose",
        "posttest": "remap-istanbul -i ./coverage/coverage.json -o ./coverage/coverage-remap.json && istanbul check-coverage ./coverage/coverage-remap.json",
        "systest": "node ./node_modules/vscode/bin/test --verbose",
        "licchk": "license-check-and-add",
        "tslint": "tslint",
        "lint": "npm run tslint 'src/**/*.ts' 'test/**/*.test.ts' 'integrationTest/tests/integration.test.ts' 'integrationTest/nodeTests/integrationNode.test.ts'",
        "updatePackageJSON": "node ../.travis/rewritePackageJson.js",
        "productionFlag": "node ../.travis/rewritePackageJson.js publish",
        "integrationTests": "./integrationTest/scripts/start-integration-tests.sh && npm run compile",
        "localize": "vscl out/src/**/*.js"
    },
    "devDependencies": {
        "@types/chai": "4.1.4",
        "@types/chai-as-promised": "7.1.0",
        "@types/dateformat": "^1.0.1",
        "@types/dockerode": "^2.5.5",
        "@types/fs-extra": "^5.0.4",
        "@types/glob": "5.0.35",
        "@types/mocha": "5.2.5",
        "@types/node": "10.5.4",
        "@types/rimraf": "^2.0.2",
        "@types/sinon": "5.0.1",
        "@types/sinon-chai": "3.2.0",
        "@types/strip-ansi": "^3.0.0",
        "@types/tmp": "0.0.33",
        "angular-tslint-rules": "1.5.0",
        "chai": "4.1.2",
        "chai-as-promised": "7.1.1",
        "decache": "4.4.0",
        "glob": "7.1.2",
        "istanbul": "0.4.5",
        "license-check-and-add": "2.3.6",
        "mocha": "5.2.0",
        "remap-istanbul": "0.11.1",
        "rimraf": "^2.6.2",
        "sinon": "6.1.4",
        "sinon-chai": "3.2.0",
        "tmp": "0.0.33",
        "ts-node": "7.0.0",
        "tslint": "5.11.0",
        "tslint-loader": "3.6.0",
        "typescript": "3.0.1",
        "vsce": "^1.46.0",
        "vscode": "1.1.29",
        "vscode-nls-dev": "^3.2.5"
    },
    "dependencies": {
        "@fidm/x509": "1.1.3",
        "axios": "^0.18.0",
        "child-process-promise": "^2.2.1",
        "dateformat": "^3.0.3",
        "dockerode": "^2.5.5",
        "ejs": "^2.6.1",
        "find-free-port": "^2.0.0",
        "fs-extra": "^7.0.0",
        "generator-fabric": "0.0.19",
        "home-dir": "1.0.0",
        "shelljs": "^0.8.3",
        "showdown": "^1.9.0",
        "strip-ansi": "^4.0.0",
        "uuid": "^3.3.2",
        "vscode-extension-telemetry": "0.1.1",
        "vscode-nls": "^4.0.0",
        "yeoman-environment": "^2.3.3"
    },
    "optionalDependencies": {
        "fabric-ca-client": "1.4.1-snapshot.17",
        "fabric-client": "1.4.1-snapshot.17",
        "fabric-network": "1.4.1-snapshot.19"
    },
    "nativeDependencies": {
        "grpc": {
            "linux-ia32": {
                "original": "./node_modules/grpc/src/node/extension_binary/node-v64-linux-ia32-glibc",
                "new": "./node_modules/grpc/src/node/extension_binary/electron-v3.0-linux-ia32-glibc"
            },
            "linux-x64": {
                "original": "./node_modules/grpc/src/node/extension_binary/node-v64-linux-x64-glibc",
                "new": "./node_modules/grpc/src/node/extension_binary/electron-v3.0-linux-x64-glibc"
            },
            "darwin-x64": {
                "original": "./node_modules/grpc/src/node/extension_binary/node-v64-darwin-x64-unknown",
                "new": "./node_modules/grpc/src/node/extension_binary/electron-v3.0-darwin-x64-unknown"
            },
            "win32-ia32": {
                "original": "./node_modules/grpc/src/node/extension_binary/node-v64-win32-ia32-unknown",
                "new": "./node_modules/grpc/src/node/extension_binary/electron-v3.0-win32-ia32-unknown"
            },
            "win32-x64": {
                "original": "./node_modules/grpc/src/node/extension_binary/node-v64-win32-x64-unknown",
                "new": "./node_modules/grpc/src/node/extension_binary/electron-v3.0-win32-x64-unknown"
            }
        }
    },
    "extensionPack": [
        "legfrey.javascript-test-runner"
    ],
    "license-check-and-add-config": {
        "folder": ".",
        "license": "LICENSE.txt",
        "exact_paths_method": "EXCLUDE",
        "exact_paths": [
            "node_modules",
            "out",
            ".vscode-test",
            "coverage",
            "resources",
            "test/data",
            ".DS_Store",
            "config/.DS_Store",
            "test/.DS_Store",
            "i18n/README.md",
            "integrationTest/data",
            "integrationTest/tmp",
            "integrationTest/nodeTests/data",
            "basic-network",
            "CHANGELOG.md",
            "templates/tsTestSmartContractTemplate.ejs",
            "templates/jsTestSmartContractTemplate.ejs",
            "templates/HomeView.ejs",
            "templates/SampleView.ejs"
        ],
        "file_type_method": "EXCLUDE",
        "file_types": [
            ".txt",
            ".vsix",
            ".yml",
            ".yml",
            ".yaml",
            ".tgz",
            ".key",
            ".gz",
            ".pem",
            ".crt",
            ".tx",
            ".block",
            ".log",
            ".pid",
            ".port"
        ],
        "insert_license": false,
        "clear_license": false,
        "license_formats": {
            "ts|acl|cto|js|qry": {
                "prepend": "/*",
                "append": "*/",
                "eachLine": {
                    "prepend": " * "
                }
            },
            "vscodeignore": {
                "eachLine": {
                    "prepend": "# "
                }
            },
            "md": {
                "file": "../markdown-license.txt"
            }
        }
    }
}