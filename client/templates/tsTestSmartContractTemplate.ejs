/*
* Use this file for functional testing of your smart contract.
* Fill out the arguments and return values for a function and
* use the CodeLens links above the transaction blocks to
* invoke/submit transactions.
* All transactions defined in your smart contract are used here
* to generate tests, including those functions that would
* normally only be used on instantiate and upgrade operations.
* This basic test file can also be used as the basis for building
* further functional tests to run as part of a continuous
* integration pipeline, or for debugging locally deployed smart
* contracts by invoking/submitting individual transactions.
*/
/*
* Generating this test file will also trigger an npm install
* in the smart contract project directory. This installs any
* package dependencies, including fabric-network, which are
* required for this test file to be run locally.
*/

import * as assert from 'assert';
import * as fabricNetwork from 'fabric-network';
import * as fs from 'fs-extra';
import * as yaml from 'js-yaml';
import { URL } from 'url';

<%_ if (contractName !== '') { _%>
describe('<%=contractName%>-<%=chaincodeLabel%>' , () => {
<%_ } else { _%>
describe('<%=chaincodeLabel%>' , () => {
<%_ } _%>

    const gateway: fabricNetwork.Gateway = new fabricNetwork.Gateway();
    const fabricWallet: fabricNetwork.FileSystemWallet = new fabricNetwork.FileSystemWallet(
        '<%=walletPath%>');
    let identityName: string;
    let connectionProfile: any;

    before(async () => {
        const connectionProfilePath: string = '<%=connectionProfilePath%>';

        const connectionProfileContents: any = await fs.readFile(connectionProfilePath, 'utf8');
        if (connectionProfilePath.endsWith('.json')) {
            connectionProfile = JSON.parse(connectionProfileContents);
        } else if (connectionProfilePath.endsWith('.yaml') || connectionProfilePath.endsWith('.yml')) {
            connectionProfile = yaml.safeLoad(connectionProfileContents);
        };

        const identities: fabricNetwork.IdentityInfo[] = await fabricWallet.list();
        // TODO: edit to use different identities in wallet
        identityName = identities[0].label;

    });

    beforeEach(async () => {
        const discoveryAsLocalhost: boolean = hasLocalhostURLs(connectionProfile);
        const discoveryEnabled: boolean = !discoveryAsLocalhost;

        const options: fabricNetwork.GatewayOptions = {
            discovery: {
                asLocalhost: discoveryAsLocalhost,
                enabled: discoveryEnabled,
            },
            identity: identityName,
            wallet: fabricWallet,
        };

        await gateway.connect(connectionProfile, options);
    });

    afterEach(async () => {
        gateway.disconnect();
    });
<% transactions.forEach((transaction) => { %>
    it('<%=transaction.name%>', async () => {
        <%_ if (transaction.parameters && transaction.parameters.length > 0) { _%>
        // TODO: populate transaction parameters
            <%_ let params = []; _%>
            <%_ transaction.parameters.forEach((parameter) => { _%>
                <%_  params.push(` JSON.stringify(${parameter.name.replace(`"`,'')})`) _%>
                <%_ if (parameter.schema && parameter.schema['type']) { _%>
        const <%=parameter.name.replace(`"`,'')%>: <%=parameter.schema['type'].replace(`"`,'')%>;
                <%_ } else { _%>
        const <%=parameter.name.replace(`"`,'')%>;
                <%_ } _%>
            <%_ }) _%>
        const args: string[] = [<%=params%>];
        <%_ } else { _%>
        // TODO: Update with parameters of transaction
        const args: string[] = [''];
        <%_ } _%>

        const response: Buffer = await submitTransaction('<%=transaction.name%>', args);
        // submitTransaction returns buffer of transcation return value
        // TODO: Update with return value of transaction
        assert.equal(true, true);
        // assert.equal(JSON.parse(response.toString()), undefined);
    }).timeout(10000);
<% }) %>
    async function submitTransaction(functionName: string, args: string[]): Promise<Buffer> {
        // Submit transaction

        const network: fabricNetwork.Network = await gateway.getNetwork('<%=channelName%>');
        const contract: fabricNetwork.Contract = await network.getContract('<%=chaincodeName%>');

        const responseBuffer: Buffer = await contract.submitTransaction(functionName, ...args);
        return responseBuffer;
    }

    // Checks if URL is localhost
    function isLocalhostURL(url: string): boolean {
        const parsedURL: URL = new URL(url);
        const localhosts: string[] = [
            'localhost',
            '127.0.0.1'
        ];
        return localhosts.indexOf(parsedURL.hostname) !== -1;
    }

    // Used for determining whether to use discovery
    function hasLocalhostURLs(profile: any): boolean {
        const urls: string[] = [];
        for (const nodeType of ['orderers', 'peers', 'certificateAuthorities']) {
            if (!profile[nodeType]) {
                continue;
            }
            const nodes: any = profile[nodeType];
            for (const nodeName in nodes) {
                if (!nodes[nodeName].url) {
                    continue;
                }
                urls.push(nodes[nodeName].url);
            }
        }
        return urls.some((url: string) => isLocalhostURL(url));
    }

});
